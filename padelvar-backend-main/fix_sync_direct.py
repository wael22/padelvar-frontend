#!/usr/bin/env python3
"""
Correction directe de la synchronisation dans la base de donn√©es
"""

import sqlite3
import os
from werkzeug.security import generate_password_hash

def fix_sync_database():
    print("üîß CORRECTION SYNCHRONISATION BASE DE DONN√âES")
    print("=" * 60)
    
    if not os.path.exists('instance/app.db'):
        print("‚ùå Base de donn√©es non trouv√©e!")
        return False
    
    try:
        conn = sqlite3.connect('instance/app.db')
        cursor = conn.cursor()
        
        print("\n1Ô∏è‚É£ ANALYSE DES DONN√âES ACTUELLES")
        print("-" * 40)
        
        # R√©cup√©rer tous les clubs et leurs utilisateurs
        cursor.execute("""
            SELECT c.id, c.name, c.email, c.phone_number, c.address,
                   u.id as user_id, u.name as user_name, u.email as user_email, u.phone_number as user_phone
            FROM club c
            LEFT JOIN user u ON c.id = u.club_id AND u.role = 'CLUB'
            ORDER BY c.id
        """)
        
        clubs_data = cursor.fetchall()
        
        print(f"üìä {len(clubs_data)} club(s) trouv√©(s)")
        
        corrections = 0
        created_users = 0
        
        print("\n2Ô∏è‚É£ CORRECTION DES PROBL√àMES")
        print("-" * 40)
        
        for club_data in clubs_data:
            club_id, club_name, club_email, club_phone, club_address, user_id, user_name, user_email, user_phone = club_data
            
            print(f"\nüè¢ Club {club_id}: {club_name}")
            
            if user_id is None:
                # Cr√©er un nouvel utilisateur pour ce club
                print(f"   ‚ûï Cr√©ation d'un utilisateur pour le club {club_id}")
                
                password_hash = generate_password_hash('club123')  # Mot de passe par d√©faut
                
                cursor.execute("""
                    INSERT INTO user (email, password_hash, name, role, club_id, phone_number, credits_balance, created_at)
                    VALUES (?, ?, ?, 'CLUB', ?, ?, 0, datetime('now'))
                """, (club_email, password_hash, club_name, club_id, club_phone))
                
                new_user_id = cursor.lastrowid
                print(f"   ‚úÖ Utilisateur {new_user_id} cr√©√© (mot de passe: club123)")
                created_users += 1
                
            else:
                # V√©rifier la synchronisation
                sync_issues = []
                
                if club_name != user_name:
                    sync_issues.append(f"nom: '{club_name}' ‚â† '{user_name}'")
                if club_email != user_email:
                    sync_issues.append(f"email: '{club_email}' ‚â† '{user_email}'")
                if club_phone != user_phone:
                    sync_issues.append(f"t√©l√©phone: '{club_phone}' ‚â† '{user_phone}'")
                
                if sync_issues:
                    print(f"   üîß Correction de la synchronisation pour utilisateur {user_id}")
                    print(f"      Probl√®mes: {', '.join(sync_issues)}")
                    
                    # Mettre √† jour l'utilisateur avec les donn√©es du club
                    cursor.execute("""
                        UPDATE user 
                        SET name = ?, email = ?, phone_number = ?
                        WHERE id = ?
                    """, (club_name, club_email, club_phone, user_id))
                    
                    print(f"   ‚úÖ Utilisateur {user_id} synchronis√©")
                    corrections += 1
                else:
                    print(f"   ‚úÖ Utilisateur {user_id} d√©j√† synchronis√©")
        
        # Commit des changements
        conn.commit()
        
        print(f"\n3Ô∏è‚É£ R√âSULTATS")
        print("-" * 40)
        print(f"‚úÖ {created_users} utilisateur(s) cr√©√©(s)")
        print(f"‚úÖ {corrections} correction(s) appliqu√©e(s)")
        
        # V√©rification finale
        print(f"\n4Ô∏è‚É£ V√âRIFICATION FINALE")
        print("-" * 40)
        
        cursor.execute("""
            SELECT c.id, c.name, c.email, c.phone_number,
                   u.id as user_id, u.name as user_name, u.email as user_email, u.phone_number as user_phone
            FROM club c
            LEFT JOIN user u ON c.id = u.club_id AND u.role = 'CLUB'
            ORDER BY c.id
        """)
        
        final_data = cursor.fetchall()
        
        all_sync = True
        for row in final_data:
            club_id, club_name, club_email, club_phone, user_id, user_name, user_email, user_phone = row
            
            if user_id is None:
                print(f"‚ùå Club {club_id}: Toujours sans utilisateur")
                all_sync = False
            elif (club_name != user_name or club_email != user_email or club_phone != user_phone):
                print(f"‚ùå Club {club_id}: Toujours d√©synchronis√©")
                all_sync = False
            else:
                print(f"‚úÖ Club {club_id}: Parfaitement synchronis√©")
        
        conn.close()
        
        print(f"\n{'='*60}")
        if all_sync:
            print("üéØ SYNCHRONISATION BIDIRECTIONNELLE COMPL√àTE!")
            print("‚úÖ Tous les clubs ont un utilisateur associ√©")
            print("‚úÖ Toutes les donn√©es sont synchronis√©es")
            print("‚úÖ Vous pouvez maintenant tester les modifications")
        else:
            print("‚ö†Ô∏è  Il reste des probl√®mes de synchronisation")
            print("üîÑ R√©ex√©cutez ce script si n√©cessaire")
        
        print("=" * 60)
        
        return all_sync
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")
        return False

def create_admin_if_missing():
    print("\nüîë V√âRIFICATION COMPTES ADMIN")
    print("-" * 40)
    
    try:
        conn = sqlite3.connect('instance/app.db')
        cursor = conn.cursor()
        
        admin_accounts = [
            ('admin@padelvar.com', 'Super Admin'),
            ('admin2@padelvar.com', 'Super Admin 2')
        ]
        
        for admin_email, admin_name in admin_accounts:
            cursor.execute("SELECT id FROM user WHERE email = ? AND role = 'SUPER_ADMIN'", (admin_email,))
            if cursor.fetchone():
                print(f"‚úÖ {admin_email} existe d√©j√†")
            else:
                print(f"‚ûï Cr√©ation de {admin_email}")
                password_hash = generate_password_hash('admin123')
                cursor.execute("""
                    INSERT INTO user (email, password_hash, name, role, credits_balance, created_at)
                    VALUES (?, ?, ?, 'SUPER_ADMIN', 100, datetime('now'))
                """, (admin_email, password_hash, admin_name))
                print(f"‚úÖ {admin_email} cr√©√© (mot de passe: admin123)")
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation admin: {e}")

def main():
    create_admin_if_missing()
    success = fix_sync_database()
    
    if success:
        print("\nüìù √âTAPES SUIVANTES:")
        print("1. D√©marrez le serveur backend: python app.py")
        print("2. D√©marrez le frontend: npm run dev")
        print("3. Testez les modifications de profil club")
        print("4. V√©rifiez que les changements apparaissent dans l'admin")

if __name__ == '__main__':
    main()
