"""
Module de gestion des vid√©os et des enregistrements pour l'application PadelVar.
Ce module contient toutes les routes API li√©es aux vid√©os, aux enregistrements, 
et √† la gestion des terrains pour les matchs de padel.

La version refactoris√©e s√©pare la logique m√©tier des routes API et am√©liore
la gestion des erreurs et des ressources.
"""

from flask import Blueprint, request, jsonify, session, send_file, Response
from src.models.user import db, User, Video, Court, Club, RecordingSession
from src.services.video_capture_service import video_capture_service
from datetime import datetime, timedelta
import os
import io
import logging
import threading
import time
from typing import Dict, Any, Optional, List, Tuple
import json
from functools import wraps

# Configuration du logger
logger = logging.getLogger(__name__)

# Cr√©ation du Blueprint
videos_bp = Blueprint('videos', __name__)

# ====================================================================
# GESTIONNAIRE D'ENREGISTREMENTS
# ====================================================================

class RecordingManager:
    """
    Classe centralis√©e pour g√©rer les enregistrements actifs et leurs timers.
    Cette classe g√®re la synchronisation, les acc√®s concurrents et le nettoyage
    des ressources pour tous les enregistrements.
    """
    
    def __init__(self):
        """Initialise les dictionnaires pour suivre les enregistrements et leurs timers."""
        self.active_recordings = {}  # Informations sur les enregistrements actifs
        self.recording_timers = {}   # Informations sur les timers des enregistrements
        self.timer_threads = {}      # Threads des timers
        self.lock = threading.RLock()  # Verrou pour prot√©ger les acc√®s concurrents
        
        # Configuration
        self.cleanup_interval = 300  # 5 minutes entre chaque nettoyage
        self.max_timer_age = 3600    # 1 heure max d'√¢ge pour un timer
        
        # D√©marrer le thread de nettoyage automatique
        self.cleanup_thread = threading.Thread(
            target=self._cleanup_loop,
            daemon=True
        )
        self.cleanup_thread.start()
        
        logger.info("üîß Gestionnaire d'enregistrements initialis√©")
    
    def start_recording(self, session_id: str, court_id: int, user_id: int, 
                        session_name: str, duration_minutes: int) -> None:
        """
        Enregistre une nouvelle session d'enregistrement et d√©marre son timer.
        
        Args:
            session_id: Identifiant unique de la session d'enregistrement
            court_id: ID du terrain o√π se d√©roule l'enregistrement
            user_id: ID de l'utilisateur qui a lanc√© l'enregistrement
            session_name: Nom de la session (titre du match)
            duration_minutes: Dur√©e pr√©vue de l'enregistrement en minutes
        """
        with self.lock:
            start_time = datetime.now()
            end_time = start_time + timedelta(minutes=duration_minutes)
            
            # Enregistrer les informations de la session
            self.active_recordings[session_id] = {
                'user_id': user_id,
                'court_id': court_id,
                'start_time': start_time,
                'duration_minutes': duration_minutes,
                'session_name': session_name
            }
            
            # Enregistrer les informations du timer
            self.recording_timers[session_id] = {
                'start_time': start_time,
                'end_time': end_time,
                'duration_minutes': duration_minutes,
                'status': 'running'
            }
            
            # D√©marrer le timer automatique en arri√®re-plan
            timer_thread = threading.Thread(
                target=self._auto_stop_recording,
                args=(session_id, court_id, duration_minutes, user_id),
                daemon=True
            )
            timer_thread.start()
            
            # Stocker la r√©f√©rence au thread
            self.timer_threads[session_id] = timer_thread
            
            logger.info(f"‚è±Ô∏è Enregistrement {session_id} d√©marr√© pour {duration_minutes} minutes")
    
    def stop_recording(self, session_id: str) -> None:
        """
        Arr√™te un enregistrement en cours et met √† jour son statut.
        
        Args:
            session_id: Identifiant de la session d'enregistrement √† arr√™ter
        """
        with self.lock:
            # Mettre √† jour le statut du timer
            if session_id in self.recording_timers:
                self.recording_timers[session_id]['status'] = 'stopped_manually'
            
            # Supprimer de la liste des enregistrements actifs
            if session_id in self.active_recordings:
                del self.active_recordings[session_id]
            
            logger.info(f"‚èπÔ∏è Enregistrement {session_id} arr√™t√© manuellement")
    
    def extend_recording(self, session_id: str, additional_minutes: int) -> Optional[datetime]:
        """
        Prolonge la dur√©e d'un enregistrement en cours.
        
        Args:
            session_id: Identifiant de la session d'enregistrement √† prolonger
            additional_minutes: Nombre de minutes √† ajouter
            
        Returns:
            La nouvelle date de fin ou None si l'enregistrement n'existe pas
        """
        with self.lock:
            if session_id not in self.active_recordings:
                return None
            
            # Prolonger la dur√©e dans le dictionnaire d'enregistrements
            self.active_recordings[session_id]['duration_minutes'] += additional_minutes
            
            # Mettre √† jour le timer
            if session_id in self.recording_timers:
                timer_info = self.recording_timers[session_id]
                timer_info['duration_minutes'] += additional_minutes
                timer_info['end_time'] = timer_info['end_time'] + timedelta(minutes=additional_minutes)
                new_end_time = timer_info['end_time']
            else:
                # Si pas de timer, en cr√©er un nouveau
                start_time = self.active_recordings[session_id]['start_time']
                total_minutes = self.active_recordings[session_id]['duration_minutes']
                new_end_time = start_time + timedelta(minutes=total_minutes)
                
                self.recording_timers[session_id] = {
                    'start_time': start_time,
                    'end_time': new_end_time,
                    'duration_minutes': total_minutes,
                    'status': 'running'
                }
            
            logger.info(f"‚è±Ô∏è Enregistrement {session_id} prolong√© de {additional_minutes} minutes")
            return new_end_time
    
    def get_active_recordings(self, user_id: int) -> List[Dict[str, Any]]:
        """
        R√©cup√®re la liste des enregistrements actifs pour un utilisateur.
        
        Args:
            user_id: ID de l'utilisateur
            
        Returns:
            Liste des enregistrements actifs avec leurs informations
        """
        with self.lock:
            current_time = datetime.now()
            user_recordings = []
            
            for session_id, recording_info in self.active_recordings.items():
                if recording_info['user_id'] == user_id:
                    # Obtenir les infos du timer s'il existe
                    timer_info = self.recording_timers.get(session_id, {})
                    start_time = timer_info.get('start_time', recording_info['start_time'])
                    end_time = timer_info.get('end_time')
                    duration_minutes = timer_info.get('duration_minutes', recording_info['duration_minutes'])
                    status = timer_info.get('status', 'running')
                    
                    # Calculer les m√©triques
                    elapsed_minutes = (current_time - start_time).total_seconds() / 60
                    remaining_minutes = 0
                    if end_time:
                        remaining_minutes = max(0, (end_time - current_time).total_seconds() / 60)
                    
                    progress_percent = min(100, (elapsed_minutes / duration_minutes) * 100) if duration_minutes > 0 else 0
                    
                    user_recordings.append({
                        'session_id': session_id,
                        'court_id': recording_info['court_id'],
                        'session_name': recording_info['session_name'],
                        'start_time': start_time.isoformat(),
                        'end_time': end_time.isoformat() if end_time else None,
                        'duration_minutes': duration_minutes,
                        'elapsed_minutes': round(elapsed_minutes, 2),
                        'remaining_minutes': round(remaining_minutes, 2),
                        'progress_percent': round(progress_percent, 2),
                        'status': status
                    })
            
            return user_recordings
    
    def get_timer_info(self, session_id: str) -> Optional[Dict[str, Any]]:
        """
        R√©cup√®re les informations d√©taill√©es sur le timer d'un enregistrement.
        
        Args:
            session_id: Identifiant de la session d'enregistrement
            
        Returns:
            Informations sur le timer ou None si le timer n'existe pas
        """
        with self.lock:
            if session_id not in self.recording_timers:
                return None
            
            timer_info = self.recording_timers[session_id]
            current_time = datetime.now()
            
            # Calculer le temps √©coul√© et restant
            elapsed_seconds = (current_time - timer_info['start_time']).total_seconds()
            remaining_seconds = max(0, (timer_info['end_time'] - current_time).total_seconds())
            
            # Convertir en minutes pour l'interface utilisateur
            elapsed_minutes = elapsed_seconds / 60
            remaining_minutes = remaining_seconds / 60
            progress_percent = min(100, (elapsed_minutes / timer_info['duration_minutes']) * 100)
            
            return {
                'recording_id': session_id,
                'start_time': timer_info['start_time'].isoformat(),
                'end_time': timer_info['end_time'].isoformat(),
                'duration_minutes': timer_info['duration_minutes'],
                'elapsed_minutes': round(elapsed_minutes, 2),
                'remaining_minutes': round(remaining_minutes, 2),
                'progress_percent': round(progress_percent, 2),
                'status': timer_info['status'],
                'current_server_time': current_time.isoformat()
            }
    
    def update_timer_status(self, session_id: str, status: str) -> bool:
        """
        Met √† jour le statut d'un timer.
        
        Args:
            session_id: Identifiant de la session d'enregistrement
            status: Nouveau statut du timer ('running', 'stopped', 'completed', 'error', etc.)
            
        Returns:
            True si le timer a √©t√© mis √† jour, False sinon
        """
        with self.lock:
            if session_id in self.recording_timers:
                self.recording_timers[session_id]['status'] = status
                return True
            return False
    
    def _auto_stop_recording(self, session_id: str, court_id: int, duration_minutes: int, user_id: int) -> None:
        """
        Fonction qui s'ex√©cute en arri√®re-plan pour arr√™ter automatiquement 
        l'enregistrement apr√®s la dur√©e sp√©cifi√©e.
        
        Args:
            session_id: Identifiant de la session d'enregistrement
            court_id: ID du terrain
            duration_minutes: Dur√©e de l'enregistrement en minutes
            user_id: ID de l'utilisateur
        """
        try:
            logger.info(f"‚è±Ô∏è Timer automatique d√©marr√©: {session_id} - {duration_minutes} minutes")
            
            # Attendre la dur√©e sp√©cifi√©e
            time.sleep(duration_minutes * 60)
            
            # V√©rifier si l'enregistrement est toujours actif avec le verrou
            with self.lock:
                if session_id not in self.active_recordings:
                    if session_id in self.recording_timers:
                        self.recording_timers[session_id]['status'] = 'canceled'
                    logger.info(f"‚ÑπÔ∏è Enregistrement {session_id} d√©j√† arr√™t√© manuellement")
                    return
            
            logger.info(f"‚èπÔ∏è Arr√™t automatique de l'enregistrement {session_id} apr√®s {duration_minutes} minutes")
            
            # Cr√©er une nouvelle session de base de donn√©es pour le thread
            from sqlalchemy import create_engine
            from sqlalchemy.orm import sessionmaker
            from ..models.database import db
            
            # Arr√™ter l'enregistrement avec le service de capture
            result = video_capture_service.stop_recording(session_id)
            
            # Utiliser une nouvelle session DB pour les op√©rations de ce thread
            with db.session.begin():
                # Mettre √† jour le terrain
                court = Court.query.get(court_id)
                if court:
                    court.is_recording = False
                    court.recording_session_id = None
            
            # Mettre √† jour le statut du timer avec le verrou
            with self.lock:
                if session_id in self.recording_timers:
                    self.recording_timers[session_id]['status'] = 'completed'
                
                # Retirer de la liste des enregistrements actifs
                if session_id in self.active_recordings:
                    del self.active_recordings[session_id]
                
                # Retirer le thread
                if session_id in self.timer_threads:
                    del self.timer_threads[session_id]
            
            logger.info(f"‚úÖ Enregistrement {session_id} arr√™t√© automatiquement - dur√©e exacte: {duration_minutes}min")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'arr√™t automatique de l'enregistrement {session_id}: {e}")
            
            # Nettoyer en cas d'erreur avec le verrou
            with self.lock:
                if session_id in self.active_recordings:
                    del self.active_recordings[session_id]
                if session_id in self.recording_timers:
                    self.recording_timers[session_id]['status'] = 'error'
                if session_id in self.timer_threads:
                    del self.timer_threads[session_id]
            
            # Essayer de lib√©rer le terrain m√™me en cas d'erreur
            try:
                with db.session.begin():
                    court = Court.query.get(court_id)
                    if court and court.recording_session_id == session_id:
                        court.is_recording = False
                        court.recording_session_id = None
            except Exception as cleanup_error:
                logger.error(f"‚ùå Erreur lors du nettoyage du terrain {court_id}: {cleanup_error}")
    
    def _cleanup_loop(self) -> None:
        """
        Boucle de nettoyage qui s'ex√©cute p√©riodiquement pour supprimer 
        les timers expir√©s et nettoyer les ressources.
        """
        while True:
            try:
                time.sleep(self.cleanup_interval)
                self._cleanup_expired_timers()
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la boucle de nettoyage: {e}")
    
    def _cleanup_expired_timers(self) -> None:
        """Nettoie les timers expir√©s et les ressources associ√©es."""
        with self.lock:
            current_time = datetime.now()
            expired_sessions = []
            
            # Identifier les sessions expir√©es
            for session_id, timer_info in self.recording_timers.items():
                # V√©rifier si le timer est termin√© depuis longtemps
                if timer_info['status'] in ['completed', 'stopped_manually', 'error', 'canceled']:
                    end_time = timer_info.get('end_time', timer_info['start_time'])
                    if (current_time - end_time).total_seconds() > self.max_timer_age:
                        expired_sessions.append(session_id)
            
            # Nettoyer les sessions expir√©es
            for session_id in expired_sessions:
                if session_id in self.recording_timers:
                    del self.recording_timers[session_id]
                if session_id in self.active_recordings:
                    del self.active_recordings[session_id]
                if session_id in self.timer_threads:
                    del self.timer_threads[session_id]
                
                logger.info(f"üßπ Timer expir√© nettoy√©: {session_id}")

# Cr√©er une instance globale du gestionnaire d'enregistrements
recording_manager = RecordingManager()

# ====================================================================
# D√âCORATEURS ET UTILITAIRES
# ====================================================================

def login_required(f):
    """D√©corateur pour v√©rifier que l'utilisateur est authentifi√©."""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        user = get_current_user()
        if not user:
            return jsonify({'error': 'Non authentifi√©'}), 401
        return f(*args, **kwargs)
    return decorated_function

def get_current_user() -> Optional[User]:
    """
    R√©cup√®re l'utilisateur actuellement connect√© √† partir de la session.
    
    Returns:
        L'objet utilisateur ou None si non authentifi√©
    """
    user_id = session.get('user_id')
    if not user_id:
        return None
    return User.query.get(user_id)

def handle_api_error(f):
    """D√©corateur pour g√©rer uniform√©ment les erreurs d'API."""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            logger.error(f"‚ùå Erreur API: {e}")
            db.session.rollback()
            return jsonify({'error': f'Une erreur est survenue: {str(e)}'}), 500
    return decorated_function

def api_response(data=None, message=None, status=200, error=None) -> Tuple[dict, int]:
    """
    Cr√©e une r√©ponse d'API standardis√©e.
    
    Args:
        data: Donn√©es √† renvoyer
        message: Message de succ√®s ou d'information
        status: Code de statut HTTP
        error: Message d'erreur √©ventuel
        
    Returns:
        Tuple contenant la r√©ponse JSON et le code de statut
    """
    response = {}
    if data is not None:
        response.update(data)
    if message:
        response['message'] = message
    if error:
        response['error'] = error
    
    return jsonify(response), status

# ====================================================================
# ROUTES POUR LES VID√âOS
# ====================================================================

@videos_bp.route('/my-videos', methods=['GET'])
@login_required
@handle_api_error
def get_my_videos():
    """R√©cup√®re les vid√©os de l'utilisateur connect√©."""
    user = get_current_user()
    videos = Video.query.filter_by(user_id=user.id).order_by(Video.recorded_at.desc()).all()
    
    # Cr√©er une version s√©curis√©e du to_dict()
    videos_data = []
    for video in videos:
        video_dict = {
            "id": video.id,
            "title": video.title,
            "description": video.description,
            "file_url": video.file_url,
            "thumbnail_url": video.thumbnail_url,
            "duration": getattr(video, 'duration', None),
            "file_size": getattr(video, 'file_size', None),
            "is_unlocked": getattr(video, 'is_unlocked', True),
            "credits_cost": getattr(video, 'credits_cost', 1),
            "recorded_at": video.recorded_at.isoformat() if video.recorded_at else None,
            "created_at": video.created_at.isoformat() if video.created_at else None,
            "user_id": video.user_id,
            "court_id": video.court_id
        }
        videos_data.append(video_dict)
    
    return api_response(data={'videos': videos_data})

@videos_bp.route('/<int:video_id>', methods=['GET'])
@login_required
@handle_api_error
def get_video(video_id):
    """R√©cup√®re les d√©tails d'une vid√©o sp√©cifique."""
    user = get_current_user()
    video = Video.query.get_or_404(video_id)
    
    # V√©rifier que l'utilisateur a acc√®s √† cette vid√©o
    if video.user_id != user.id and not video.is_unlocked:
        return api_response(error="Acc√®s non autoris√© √† cette vid√©o", status=403)
    
    return api_response(data={'video': video.to_dict()})

@videos_bp.route('/<int:video_id>', methods=['PUT'])
@login_required
@handle_api_error
def update_video(video_id):
    """Met √† jour les informations d'une vid√©o."""
    user = get_current_user()
    video = Video.query.get_or_404(video_id)
    
    # V√©rifier que l'utilisateur est propri√©taire de la vid√©o
    if video.user_id != user.id:
        return api_response(error="Acc√®s non autoris√©", status=403)
    
    data = request.get_json()
    if 'title' in data:
        video.title = data['title']
    if 'description' in data:
        video.description = data['description']
    
    db.session.commit()
    return api_response(data={'video': video.to_dict()}, message="Vid√©o mise √† jour")

@videos_bp.route('/<int:video_id>', methods=['DELETE'])
@login_required
@handle_api_error
def delete_video(video_id):
    """Supprime une vid√©o."""
    user = get_current_user()
    video = Video.query.get_or_404(video_id)
    
    # V√©rifier que l'utilisateur est propri√©taire de la vid√©o
    if video.user_id != user.id:
        return api_response(error="Acc√®s non autoris√©", status=403)
    
    db.session.delete(video)
    db.session.commit()
    return api_response(message="Vid√©o supprim√©e")

@videos_bp.route('/<int:video_id>/share', methods=['POST'])
@login_required
@handle_api_error
def share_video(video_id):
    """G√©n√®re des liens de partage pour une vid√©o."""
    user = get_current_user()
    video = Video.query.get_or_404(video_id)
    
    # V√©rifier que l'utilisateur est propri√©taire de la vid√©o
    if video.user_id != user.id:
        return api_response(error="Acc√®s non autoris√© √† cette vid√©o", status=403)
    
    # V√©rifier que la vid√©o est d√©verrouill√©e
    if not video.is_unlocked:
        return api_response(error="La vid√©o doit √™tre d√©verrouill√©e pour √™tre partag√©e", status=400)
    
    data = request.get_json()
    platform = data.get('platform')  # 'facebook', 'instagram', 'youtube'
    
    # G√©n√©rer les liens de partage
    base_url = request.host_url
    video_url = f"{base_url}videos/{video_id}/watch"
    
    share_urls = {
        'facebook': f"https://www.facebook.com/sharer/sharer.php?u={video_url}",
        'instagram': video_url,  # Instagram n√©cessite une approche diff√©rente
        'youtube': video_url,    # YouTube n√©cessite l'API YouTube
        'direct': video_url
    }
    
    return api_response(
        data={'share_urls': share_urls, 'video_url': video_url},
        message="Liens de partage g√©n√©r√©s"
    )

@videos_bp.route('/<int:video_id>/watch', methods=['GET'])
@handle_api_error
def watch_video(video_id):
    """Route publique pour regarder une vid√©o partag√©e."""
    video = Video.query.get_or_404(video_id)
    
    # V√©rifier que la vid√©o est d√©verrouill√©e
    if not video.is_unlocked:
        user = get_current_user()
        if not user or (video and video.user_id != user.id):
            return api_response(error="Vid√©o non disponible", status=403)
    
    # Construire les URLs pour le streaming
    base_url = request.host_url.rstrip('/')
    
    # Si file_url est None ou vide, cr√©er une URL par d√©faut bas√©e sur l'ID
    stream_url = video.file_url
    if not stream_url:
        # Cr√©er un nom de fichier bas√© sur l'ID de la vid√©o
        filename = f"video_{video.id}.mp4"
        stream_url = f"/api/videos/stream/{filename}"
    elif not stream_url.startswith('http'):
        # Si c'est un chemin relatif, le compl√©ter
        if not stream_url.startswith('/'):
            stream_url = f"/api/videos/stream/{stream_url}"
        else:
            # Si c'est d√©j√† un chemin absolu √† partir de la racine
            if not stream_url.startswith('/api/'):
                stream_url = f"/api{stream_url}"
    
    # Retourner les informations de la vid√©o pour le lecteur
    return api_response(data={
        'video': {
            'id': video.id,
            'title': video.title,
            'description': video.description,
            'file_url': stream_url,  # URL construite pour le streaming
            'thumbnail_url': video.thumbnail_url,
            'duration': video.duration,
            'recorded_at': video.recorded_at.isoformat() if video.recorded_at else None
        }
    })

@videos_bp.route('/download/<int:video_id>', methods=['GET'])
@login_required
@handle_api_error
def download_video(video_id):
    """T√©l√©charge une vid√©o."""
    user = get_current_user()
    video = Video.query.get_or_404(video_id)
    
    # V√©rifier les permissions
    if video.user_id != user.id and not video.is_unlocked:
        return api_response(error="Acc√®s non autoris√©", status=403)
    
    # Pour le MVP, rediriger vers le stream
    filename = video.file_url.split('/')[-1]
    return Response(
        b'fake video data for download',
        mimetype='video/mp4',
        headers={
            'Content-Disposition': f'attachment; filename="{video.title}.mp4"',
            'Content-Type': 'application/octet-stream'
        }
    )

# ====================================================================
# ROUTES POUR LES TERRAINS ET CLUBS
# ====================================================================

@videos_bp.route('/courts/available', methods=['GET'])
@login_required
@handle_api_error
def get_available_courts():
    """R√©cup√®re la liste des terrains disponibles pour l'enregistrement."""
    # R√©cup√©rer tous les terrains non occup√©s
    courts = Court.query.filter_by(is_recording=False).all()
    
    # Grouper par club
    courts_by_club = {}
    for court in courts:
        club = Club.query.get(court.club_id)
        if club:
            if club.id not in courts_by_club:
                courts_by_club[club.id] = {
                    'club': club.to_dict(),
                    'courts': []
                }
            courts_by_club[club.id]['courts'].append(court.to_dict())
    
    return api_response(data={
        'available_courts': list(courts_by_club.values()),
        'total_available': len(courts)
    })

@videos_bp.route("/clubs/<int:club_id>/courts", methods=["GET"])
@login_required
@handle_api_error
def get_courts_for_club(club_id):
    """R√©cup√®re les terrains d'un club sp√©cifique."""
    courts = Court.query.filter_by(club_id=club_id).all()
    return api_response(data={"courts": [c.to_dict() for c in courts]})

@videos_bp.route('/courts/<int:court_id>/camera-stream', methods=['GET'])
@login_required
@handle_api_error
def get_camera_stream(court_id):
    """R√©cup√®re les informations de flux de la cam√©ra d'un terrain."""
    court = Court.query.get_or_404(court_id)
    
    return api_response(data={
        'court_id': court.id,
        'court_name': court.name,
        'camera_url': court.camera_url,
        'stream_type': 'mjpeg'  # Type de flux pour la cam√©ra par d√©faut
    })

# ====================================================================
# ROUTES POUR LA GESTION D'ENREGISTREMENT
# ====================================================================

@videos_bp.route('/record', methods=['POST'])
@login_required
@handle_api_error
def start_recording():
    """D√©marre un nouvel enregistrement avec le service de capture vid√©o."""
    user = get_current_user()
    data = request.get_json()
    
    court_id = data.get('court_id')
    session_name = data.get('session_name', f"Match du {datetime.now().strftime('%d/%m/%Y')}")
    duration_minutes = data.get('duration_minutes', 60)  # Dur√©e par d√©faut : 60 minutes
    
    if not court_id:
        return api_response(error="Le terrain est requis", status=400)
    
    # V√©rifier que le terrain existe
    court = Court.query.get(court_id)
    if not court:
        return api_response(error="Terrain non trouv√©", status=400)
    
    # V√©rifier que le terrain n'est pas d√©j√† en cours d'enregistrement
    if hasattr(court, 'is_recording') and court.is_recording:
        return api_response(error="Ce terrain est d√©j√† en cours d'enregistrement", status=400)
    
    # D√©marrer l'enregistrement avec le service de capture
    result = video_capture_service.start_recording(
        court_id=court_id,
        user_id=user.id,
        session_name=session_name
    )
    
    session_id = result['session_id']
    start_time = datetime.now()
    end_time = start_time + timedelta(minutes=duration_minutes)
    
    # Marquer le terrain comme en cours d'enregistrement
    court.is_recording = True
    court.recording_session_id = session_id
    db.session.commit()
    
    # Enregistrer dans le gestionnaire d'enregistrements
    recording_manager.start_recording(
        session_id=session_id,
        court_id=court_id,
        user_id=user.id,
        session_name=session_name,
        duration_minutes=duration_minutes
    )
    
    logger.info(f"üé¨ Enregistrement d√©marr√© par utilisateur {user.id} sur terrain {court_id} - Dur√©e: {duration_minutes}min")
    
    return api_response(data={
        'session_id': session_id,
        'court_id': court_id,
        'session_name': session_name,
        'camera_url': result['camera_url'],
        'status': 'recording',
        'duration_minutes': duration_minutes,
        'start_time': start_time.isoformat(),
        'end_time': end_time.isoformat(),
        'auto_stop_time': end_time.isoformat()
    }, message="Enregistrement d√©marr√© avec succ√®s")

@videos_bp.route('/stop-recording', methods=['POST'])
@login_required
@handle_api_error
def stop_recording():
    """Arr√™te un enregistrement en cours."""
    user = get_current_user()
    data = request.get_json()
    
    session_id = data.get('session_id')
    court_id = data.get('court_id')
    manual_stop = data.get('manual_stop', True)  # Indique si c'est un arr√™t manuel ou automatique
    
    if not session_id:
        return api_response(error="session_id manquant", status=400)
    
    # V√©rifier que l'enregistrement appartient √† l'utilisateur (sauf arr√™t automatique)
    with recording_manager.lock:
        if manual_stop and session_id in recording_manager.active_recordings:
            recording_info = recording_manager.active_recordings[session_id]
            if recording_info['user_id'] != user.id:
                return api_response(error="Vous ne pouvez pas arr√™ter cet enregistrement", status=403)
    
    # Arr√™ter l'enregistrement avec le service de capture
    result = video_capture_service.stop_recording(session_id)
    
    if result.get('status') == 'error':
        return api_response(error=result.get('error', "Erreur lors de l'arr√™t"), status=500)
    
    # Mettre √† jour le terrain
    if court_id:
        court = Court.query.get(court_id)
        if court:
            court.is_recording = False
            court.recording_session_id = None
            db.session.commit()
    
    # Mettre √† jour dans le gestionnaire d'enregistrements
    recording_manager.stop_recording(session_id)
    
    # Calculer la dur√©e r√©elle
    actual_duration = None
    with recording_manager.lock:
        if session_id in recording_manager.active_recordings:
            recording_info = recording_manager.active_recordings[session_id]
            actual_duration = (datetime.now() - recording_info['start_time']).total_seconds() / 60
    
    stop_reason = "manual" if manual_stop else "auto"
    logger.info(f"‚èπÔ∏è Enregistrement arr√™t√© ({stop_reason}) par utilisateur {user.id}: {session_id}")
    
    return api_response(data={
        'session_id': session_id,
        'status': result.get('status'),
        'video_id': result.get('video_id'),
        'video_filename': result.get('video_filename'),
        'duration': result.get('duration'),
        'actual_duration_minutes': round(actual_duration, 2) if actual_duration else None,
        'file_size': result.get('file_size'),
        'stopped_by': stop_reason
    }, message="Enregistrement arr√™t√© avec succ√®s")

@videos_bp.route('/active-recordings', methods=['GET'])
@login_required
@handle_api_error
def get_active_recordings():
    """R√©cup√®re la liste des enregistrements actifs de l'utilisateur."""
    user = get_current_user()
    
    # Utiliser le gestionnaire d'enregistrements
    user_recordings = recording_manager.get_active_recordings(user.id)
    
    return api_response(data={
        'active_recordings': user_recordings,
        'total_active': len(user_recordings)
    })

@videos_bp.route('/recording-timer/<recording_id>', methods=['GET'])
@login_required
@handle_api_error
def get_recording_timer(recording_id):
    """R√©cup√®re l'√©tat du compteur d'un enregistrement."""
    # Utiliser le gestionnaire d'enregistrements
    timer_info = recording_manager.get_timer_info(recording_id)
    
    if not timer_info:
        return api_response(
            error="Compteur non trouv√© pour cet enregistrement", 
            status=404, 
            data={'recording_id': recording_id}
        )
    
    return api_response(data=timer_info)

@videos_bp.route('/recording/<recording_id>/extend', methods=['POST'])
@login_required
@handle_api_error
def extend_recording(recording_id):
    """Prolonge un enregistrement en cours."""
    user = get_current_user()
    data = request.get_json()
    additional_minutes = data.get('additional_minutes', 30)
    
    # V√©rifier que l'enregistrement existe et appartient √† l'utilisateur
    with recording_manager.lock:
        if recording_id not in recording_manager.active_recordings:
            return api_response(error="Enregistrement non trouv√© ou d√©j√† termin√©", status=404)
        
        recording_info = recording_manager.active_recordings[recording_id]
        
        # V√©rifier que l'utilisateur est propri√©taire
        if recording_info['user_id'] != user.id:
            return api_response(error="Acc√®s non autoris√©", status=403)
    
    # Prolonger l'enregistrement
    new_end_time = recording_manager.extend_recording(recording_id, additional_minutes)
    
    if not new_end_time:
        return api_response(error="Erreur lors de la prolongation", status=500)
    
    logger.info(f"‚è±Ô∏è Enregistrement {recording_id} prolong√© de {additional_minutes} minutes par utilisateur {user.id}")
    
    return api_response(
        data={
            'new_duration_minutes': recording_info['duration_minutes'] + additional_minutes,
            'new_end_time': new_end_time.isoformat()
        },
        message=f"Enregistrement prolong√© de {additional_minutes} minutes"
    )

@videos_bp.route('/recording/<recording_id>/status', methods=['GET'])
@login_required
@handle_api_error
def get_recording_status_by_id(recording_id):
    """R√©cup√®re le statut d'un enregistrement en cours."""
    # Obtenir le statut depuis le service de capture
    status = video_capture_service.get_recording_status(recording_id)
    
    if 'error' in status:
        return api_response(error=status['error'], status=404)
    
    # Ajouter les informations du timer si disponible
    timer_info = recording_manager.get_timer_info(recording_id)
    if timer_info:
        status.update({
            'timer_status': timer_info['status'],
            'elapsed_minutes': timer_info['elapsed_minutes'],
            'remaining_minutes': timer_info['remaining_minutes'],
            'progress_percent': timer_info['progress_percent'],
            'duration_minutes': timer_info['duration_minutes'],
            'end_time': timer_info['end_time']
        })
    
    return api_response(data=status)

@videos_bp.route('/recording/<recording_id>/stop', methods=['POST'])
@login_required
@handle_api_error
def stop_recording_by_id(recording_id):
    """Arr√™te un enregistrement sp√©cifique par son ID."""
    user = get_current_user()
    
    # Arr√™ter l'enregistrement avec le service de capture
    result = video_capture_service.stop_recording(recording_id)
    
    if result.get('status') == 'error':
        return api_response(error=result.get('error', "Erreur lors de l'arr√™t"), status=500)
    
    # Mettre √† jour le terrain qui √©tait en cours d'enregistrement
    court = Court.query.filter_by(recording_session_id=recording_id).first()
    if court:
        court.is_recording = False
        court.recording_session_id = None
        db.session.commit()
    
    # Mettre √† jour dans le gestionnaire d'enregistrements
    recording_manager.stop_recording(recording_id)
    
    logger.info(f"‚èπÔ∏è Enregistrement arr√™t√© par utilisateur {user.id}: {recording_id}")
    
    return api_response(
        data={
            'recording_id': recording_id,
            'status': result.get('status'),
            'video_id': result.get('video_id'),
            'video_filename': result.get('video_filename'),
            'duration': result.get('duration'),
            'file_size': result.get('file_size')
        },
        message="Enregistrement arr√™t√© avec succ√®s"
    )

# ====================================================================
# ROUTES POUR LE PARTAGE DE VID√âOS
# ====================================================================

@videos_bp.route('/stream/<filename>', methods=['GET'])
@login_required
@handle_api_error
def stream_video(filename):
    """Sert les fichiers vid√©o (simulation pour le MVP)."""
    # Cr√©er une r√©ponse de stream vid√©o simul√©e
    def generate_fake_video():
        # Donn√©es de test pour simuler une vid√©o MP4
        fake_video_data = b'\x00\x00\x00\x18ftypmp42\x00\x00\x00\x00mp42isom' + b'\x00' * 1000
        yield fake_video_data
    
    return Response(
        generate_fake_video(),
        mimetype='video/mp4',
        headers={
            'Content-Disposition': f'inline; filename="{filename}"',
            'Accept-Ranges': 'bytes',
            'Content-Length': '1024'
        }
    )

@videos_bp.route('/thumbnail/<filename>', methods=['GET'])
@handle_api_error
def get_thumbnail(filename):
    """Sert les thumbnails (simulation pour le MVP)."""
    # Cr√©er une image placeholder simple (1x1 pixel transparent PNG)
    placeholder_png = (
        b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x01\x00\x00\x00\x007n\xf9$\x00\x00\x00\nIDATx\x9cc\xf8\x00\x00\x00\x01\x00\x01U\r\r\x82\x00\x00\x00\x00IEND\xaeB`\x82'
    )
    
    return Response(
        placeholder_png,
        mimetype='image/png',
        headers={
            'Content-Disposition': f'inline; filename="{filename}"',
            'Cache-Control': 'public, max-age=3600'
        }
    )

# ====================================================================
# ROUTES POUR LA GESTION DES CR√âDITS
# ====================================================================

@videos_bp.route('/buy-credits', methods=['POST'])
@login_required
@handle_api_error
def buy_credits():
    """Ach√®te des cr√©dits pour d√©bloquer des vid√©os."""
    user = get_current_user()
    data = request.get_json()
    credits_to_buy = data.get('credits', 0)
    payment_method = data.get('payment_method', 'simulation')
    
    if credits_to_buy <= 0:
        return api_response(error="Le nombre de cr√©dits doit √™tre positif", status=400)
    
    # Pour le MVP, on simule le paiement
    # Dans une vraie impl√©mentation, on int√©grerait un syst√®me de paiement
    
    # Ajouter les cr√©dits au solde de l'utilisateur
    user.credits_balance += credits_to_buy
    db.session.commit()
    
    return api_response(
        data={
            'new_balance': user.credits_balance,
            'transaction_id': f'txn_{user.id}_{int(datetime.now().timestamp())}'
        },
        message=f"{credits_to_buy} cr√©dits achet√©s avec succ√®s"
    )

# ====================================================================
# ROUTES POUR LA GESTION DES QR CODES
# ====================================================================

@videos_bp.route('/qr-scan', methods=['POST'])
@login_required
@handle_api_error
def scan_qr_code():
    """G√®re le scan QR code et ouvre la cam√©ra sur mobile."""
    data = request.get_json()
    qr_code = data.get('qr_code')
    
    if not qr_code:
        return api_response(error="QR code requis", status=400)
    
    # Rechercher le terrain correspondant au QR code
    court = Court.query.filter_by(qr_code=qr_code).first()
    if not court:
        return api_response(error="QR code invalide ou terrain non trouv√©", status=404)
    
    # R√©cup√©rer les informations du club
    club = Club.query.get(court.club_id)
    
    return api_response(
        data={
            'court': court.to_dict(),
            'club': club.to_dict() if club else None,
            'camera_url': court.camera_url,
            'can_record': True  # L'utilisateur peut d√©marrer un enregistrement
        },
        message="QR code scann√© avec succ√®s"
    )
import io
import logging
import threading
import time

# Configuration du logger
logger = logging.getLogger(__name__)
videos_bp = Blueprint('videos', __name__)

# ====================================================================
# GESTION DES ENREGISTREMENTS EN M√âMOIRE
# ====================================================================

class RecordingManager:
    """
    Classe responsable de la gestion des enregistrements actifs et de leurs timers.
    Centralise la logique de gestion pour √©viter les duplications et am√©liorer la maintenance.
    """
    def __init__(self):
        self.active_recordings = {}
        self.recording_timers = {}
        self.lock = threading.Lock()  # Pour √©viter les conditions de course
    
    def start_recording(self, session_id, user_id, court_id, duration_minutes, session_name):
        """D√©marre un nouvel enregistrement et son timer"""
        with self.lock:
            start_time = datetime.now()
            end_time = start_time + timedelta(minutes=duration_minutes)
            
            # Stocker les informations d'enregistrement
            self.active_recordings[session_id] = {
                'user_id': user_id,
                'court_id': court_id,
                'start_time': start_time,
                'duration_minutes': duration_minutes,
                'session_name': session_name
            }
            
            # Initialiser le timer
            self.recording_timers[session_id] = {
                'start_time': start_time,
                'end_time': end_time,
                'duration_minutes': duration_minutes,
                'status': 'running'
            }
            
            return {
                'session_id': session_id,
                'start_time': start_time,
                'end_time': end_time
            }
    
    def stop_recording(self, session_id, stopped_by='manual'):
        """Arr√™te un enregistrement actif"""
        with self.lock:
            recording_info = self.active_recordings.get(session_id)
            if not recording_info:
                return None
            
            # Mettre √† jour le statut du timer
            if session_id in self.recording_timers:
                if stopped_by == 'manual':
                    self.recording_timers[session_id]['status'] = 'stopped_manually'
                else:
                    self.recording_timers[session_id]['status'] = 'completed'
            
            # Calculer la dur√©e r√©elle
            actual_duration = None
            if recording_info:
                actual_duration = (datetime.now() - recording_info['start_time']).total_seconds() / 60
                
            # Retirer de la liste des enregistrements actifs
            del self.active_recordings[session_id]
            
            return {
                'recording_info': recording_info,
                'actual_duration': actual_duration
            }
    
    def get_timer_info(self, recording_id):
        """R√©cup√®re les informations du timer pour un enregistrement"""
        with self.lock:
            if recording_id not in self.recording_timers:
                return None
            
            timer_info = self.recording_timers[recording_id].copy()
            current_time = datetime.now()
            
            # Calculer le temps √©coul√© et restant
            elapsed_seconds = (current_time - timer_info['start_time']).total_seconds()
            remaining_seconds = max(0, (timer_info['end_time'] - current_time).total_seconds())
            
            # Convertir en minutes pour l'interface utilisateur
            elapsed_minutes = elapsed_seconds / 60
            remaining_minutes = remaining_seconds / 60
            progress_percent = min(100, (elapsed_minutes / timer_info['duration_minutes']) * 100)
            
            return {
                'recording_id': recording_id,
                'start_time': timer_info['start_time'].isoformat(),
                'end_time': timer_info['end_time'].isoformat(),
                'duration_minutes': timer_info['duration_minutes'],
                'elapsed_minutes': round(elapsed_minutes, 2),
                'remaining_minutes': round(remaining_minutes, 2),
                'progress_percent': round(progress_percent, 2),
                'status': timer_info['status'],
                'current_server_time': current_time.isoformat()
            }
    
    def extend_recording(self, recording_id, additional_minutes):
        """Prolonge la dur√©e d'un enregistrement actif"""
        with self.lock:
            if recording_id not in self.active_recordings:
                return None
            
            recording_info = self.active_recordings[recording_id]
            recording_info['duration_minutes'] += additional_minutes
            
            # Mettre √† jour le timer
            if recording_id in self.recording_timers:
                timer_info = self.recording_timers[recording_id]
                timer_info['duration_minutes'] += additional_minutes
                timer_info['end_time'] = timer_info['end_time'] + timedelta(minutes=additional_minutes)
                new_end_time = timer_info['end_time']
            else:
                new_end_time = datetime.now() + timedelta(minutes=recording_info['duration_minutes'])
            
            return {
                'new_duration_minutes': recording_info['duration_minutes'],
                'new_end_time': new_end_time
            }
    
    def get_user_recordings(self, user_id):
        """R√©cup√®re tous les enregistrements actifs d'un utilisateur"""
        with self.lock:
            user_recordings = []
            current_time = datetime.now()
            
            for session_id, recording_info in self.active_recordings.items():
                if recording_info['user_id'] == user_id:
                    # Obtenir les infos du timer
                    timer_info = self.recording_timers.get(session_id, {})
                    start_time = timer_info.get('start_time', recording_info['start_time'])
                    end_time = timer_info.get('end_time')
                    duration_minutes = timer_info.get('duration_minutes', recording_info['duration_minutes'])
                    status = timer_info.get('status', 'running')
                    
                    elapsed_minutes = (current_time - start_time).total_seconds() / 60
                    remaining_minutes = 0
                    if end_time:
                        remaining_minutes = max(0, (end_time - current_time).total_seconds() / 60)
                    
                    progress_percent = min(100, (elapsed_minutes / duration_minutes) * 100) if duration_minutes > 0 else 0
                    
                    user_recordings.append({
                        'session_id': session_id,
                        'court_id': recording_info['court_id'],
                        'session_name': recording_info['session_name'],
                        'start_time': start_time.isoformat(),
                        'end_time': end_time.isoformat() if end_time else None,
                        'duration_minutes': duration_minutes,
                        'elapsed_minutes': round(elapsed_minutes, 2),
                        'remaining_minutes': round(remaining_minutes, 2),
                        'progress_percent': round(progress_percent, 2),
                        'status': status
                    })
            
            return user_recordings
    
    def belongs_to_user(self, session_id, user_id):
        """V√©rifie si un enregistrement appartient √† un utilisateur sp√©cifique"""
        with self.lock:
            if session_id not in self.active_recordings:
                return False
            return self.active_recordings[session_id]['user_id'] == user_id
    
    def clean_old_timers(self, max_age_hours=24):
        """Nettoie les anciens timers pour √©viter la croissance ind√©finie"""
        with self.lock:
            current_time = datetime.now()
            sessions_to_remove = []
            
            # Identifier les sessions termin√©es et anciennes
            for session_id, timer_info in self.recording_timers.items():
                if timer_info['status'] in ['completed', 'stopped_manually', 'error', 'canceled']:
                    age = (current_time - timer_info['end_time']).total_seconds() / 3600
                    if age > max_age_hours:
                        sessions_to_remove.append(session_id)
            
            # Supprimer les sessions
            for session_id in sessions_to_remove:
                if session_id in self.recording_timers:
                    del self.recording_timers[session_id]
            
            return len(sessions_to_remove)

# Initialiser le gestionnaire d'enregistrements
recording_manager = RecordingManager()

# Planifier un nettoyage p√©riodique des anciens timers
def schedule_timer_cleanup():
    """Fonction pour planifier le nettoyage p√©riodique des anciens timers"""
    recording_manager.clean_old_timers()
    # Replanifier toutes les 6 heures
    threading.Timer(6 * 60 * 60, schedule_timer_cleanup).start()

# D√©marrer le nettoyage p√©riodique
schedule_timer_cleanup()

def auto_stop_recording(session_id, court_id, duration_minutes, user_id):
    """
    Fonction qui s'ex√©cute en arri√®re-plan pour arr√™ter automatiquement l'enregistrement
    apr√®s la dur√©e sp√©cifi√©e ou quand d'autres conditions d'expiration sont remplies
    """
    try:
        logger.info(f"‚è±Ô∏è Timer automatique d√©marr√©: {session_id} - {duration_minutes} minutes")
        
        # V√©rifier p√©riodiquement l'√©tat de l'enregistrement au lieu d'attendre la dur√©e compl√®te
        total_wait = 0
        check_interval = 15  # V√©rifier toutes les 15 secondes
        
        while total_wait < (duration_minutes * 60):
            # Attendre l'intervalle de v√©rification
            time.sleep(check_interval)
            total_wait += check_interval
            
            # V√©rifier si l'enregistrement existe toujours
            if session_id not in recording_manager.active_recordings:
                logger.info(f"‚ÑπÔ∏è Enregistrement {session_id} d√©j√† arr√™t√© manuellement")
                return
                
            # V√©rifier si l'enregistrement a expir√© selon d'autres crit√®res
            try:
                # Utiliser une nouvelle session DB pour v√©rifier l'√©tat
                with db.session.begin():
                    # R√©cup√©rer la session d'enregistrement
                    recording_session = RecordingSession.query.filter_by(recording_id=session_id).first()
                    
                    if recording_session and recording_session.is_expired():
                        logger.info(f"‚èπÔ∏è Arr√™t automatique de l'enregistrement {session_id} - crit√®res d'expiration atteints")
                        break
                        
                    # V√©rifier si la dur√©e √©coul√©e a atteint la dur√©e planifi√©e
                    elapsed_minutes = recording_session.get_elapsed_minutes() if recording_session else total_wait / 60
                    
                    # Si on a atteint ou d√©pass√© la dur√©e planifi√©e, arr√™ter l'enregistrement
                    if elapsed_minutes >= duration_minutes:
                        logger.info(f"‚èπÔ∏è Arr√™t automatique de l'enregistrement {session_id} - dur√©e planifi√©e atteinte: {duration_minutes} minutes")
                        break
            except Exception as check_error:
                logger.error(f"‚ùå Erreur lors de la v√©rification de l'√©tat: {check_error}")
                # Continuer la boucle de v√©rification malgr√© l'erreur
        
        # V√©rifier √† nouveau si l'enregistrement est toujours actif avant de l'arr√™ter
        if session_id in recording_manager.active_recordings:
            logger.info(f"‚èπÔ∏è Ex√©cution de l'arr√™t automatique pour l'enregistrement {session_id}")
            
            # Arr√™ter l'enregistrement avec le service de capture
            result = video_capture_service.stop_recording(session_id)
            
            # Utiliser une nouvelle session DB pour les op√©rations de ce thread
            with db.session.begin():
                # Mettre √† jour le terrain
                court = Court.query.get(court_id)
                if court and court.recording_session_id == session_id:
                    court.is_recording = False
                    court.recording_session_id = None
            
            # Mettre √† jour les informations d'enregistrement
            recording_manager.stop_recording(session_id, stopped_by='auto')
            
            # Calculer la dur√©e r√©elle
            elapsed_minutes = total_wait / 60
            logger.info(f"‚úÖ Enregistrement {session_id} arr√™t√© automatiquement - dur√©e: {elapsed_minutes:.2f}min")
        else:
            logger.info(f"‚ÑπÔ∏è Enregistrement {session_id} d√©j√† arr√™t√© manuellement")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'arr√™t automatique: {e}")
        
        # Essayer de lib√©rer le terrain m√™me en cas d'erreur
        try:
            with db.session.begin():
                court = Court.query.get(court_id)
                if court and court.recording_session_id == session_id:
                    court.is_recording = False
                    court.recording_session_id = None
        except Exception as cleanup_error:
            logger.error(f"‚ùå Erreur lors du nettoyage du terrain {court_id}: {cleanup_error}")


# ====================================================================
# FONCTIONS UTILITAIRES
# ====================================================================

def get_current_user():
    """R√©cup√®re l'utilisateur actuellement connect√©"""
    user_id = session.get('user_id')
    if not user_id:
        return None
    return User.query.get(user_id)


# ====================================================================
# ROUTES API POUR LES VID√âOS
# ====================================================================

@videos_bp.route('/my-videos', methods=['GET'])
def get_my_videos():
    """R√©cup√©rer les vid√©os de l'utilisateur courant"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        videos = Video.query.filter_by(user_id=user.id).order_by(Video.recorded_at.desc()).all()
        
        # Cr√©er une version s√©curis√©e du to_dict()
        videos_data = []
        for video in videos:
            video_dict = {
                "id": video.id,
                "title": video.title,
                "description": video.description,
                "file_url": video.file_url,
                "thumbnail_url": video.thumbnail_url,
                "duration": getattr(video, 'duration', None),
                "file_size": getattr(video, 'file_size', None),
                "is_unlocked": getattr(video, 'is_unlocked', True),
                "credits_cost": getattr(video, 'credits_cost', 1),
                "recorded_at": video.recorded_at.isoformat() if video.recorded_at else None,
                "created_at": video.created_at.isoformat() if video.created_at else None,
                "user_id": video.user_id,
                "court_id": video.court_id
            }
            videos_data.append(video_dict)
        
        return jsonify({'videos': videos_data}), 200
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des vid√©os: {e}")
        return jsonify({'error': 'Erreur lors de la r√©cup√©ration des vid√©os'}), 500


@videos_bp.route('/record', methods=['POST'])
def start_recording():
    """D√©marrage d'enregistrement avec service de capture vid√©o"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    data = request.get_json()
    court_id = data.get('court_id')
    session_name = data.get('session_name', f"Match du {datetime.now().strftime('%d/%m/%Y')}")
    duration_minutes = data.get('duration_minutes', 60)  # Dur√©e par d√©faut : 60 minutes
    
    if not court_id:
        return jsonify({'error': 'Le terrain est requis'}), 400
    
    try:
        # V√©rifier que le terrain existe
        court = Court.query.get(court_id)
        if not court:
            return jsonify({'error': 'Terrain non trouv√©'}), 400
        
        # V√©rifier que le terrain n'est pas d√©j√† en cours d'enregistrement
        if hasattr(court, 'is_recording') and court.is_recording:
            return jsonify({'error': 'Ce terrain est d√©j√† en cours d\'enregistrement'}), 400
        
        # D√©marrer l'enregistrement avec le service de capture
        result = video_capture_service.start_recording(
            court_id=court_id,
            user_id=user.id,
            session_name=session_name
        )
        
        session_id = result['session_id']
        
        # Marquer le terrain comme en cours d'enregistrement
        court.is_recording = True
        court.recording_session_id = session_id
        db.session.commit()
        
        # Initialiser l'enregistrement dans le gestionnaire
        recording_info = recording_manager.start_recording(
            session_id=session_id,
            user_id=user.id,
            court_id=court_id,
            duration_minutes=duration_minutes,
            session_name=session_name
        )
        
        # D√©marrer le timer automatique en arri√®re-plan
        timer_thread = threading.Thread(
            target=auto_stop_recording,
            args=(session_id, court_id, duration_minutes, user.id),
            daemon=True  # Le thread se termine quand l'application se ferme
        )
        timer_thread.start()
        
        logger.info(f"üé¨ Enregistrement d√©marr√©: user={user.id}, terrain={court_id}, dur√©e={duration_minutes}min")
        
        return jsonify({
            'message': 'Enregistrement d√©marr√© avec succ√®s',
            'session_id': session_id,
            'court_id': court_id,
            'session_name': session_name,
            'camera_url': result['camera_url'],
            'status': 'recording',
            'duration_minutes': duration_minutes,
            'start_time': recording_info['start_time'].isoformat(),
            'end_time': recording_info['end_time'].isoformat(),
            'auto_stop_time': recording_info['end_time'].isoformat()
        }), 200
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"‚ùå Erreur lors du d√©marrage: {e}")
        return jsonify({'error': f'Erreur lors du d√©marrage: {str(e)}'}), 500


@videos_bp.route('/stop-recording', methods=['POST'])
def stop_recording():
    """Arr√™ter l'enregistrement avec service de capture vid√©o"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    data = request.get_json()
    session_id = data.get('session_id')
    court_id = data.get('court_id')
    manual_stop = data.get('manual_stop', True)
    
    if not session_id:
        return jsonify({'error': 'session_id manquant'}), 400
    
    try:
        # V√©rifier que l'enregistrement appartient √† l'utilisateur (sauf arr√™t automatique)
        if manual_stop and not recording_manager.belongs_to_user(session_id, user.id):
            return jsonify({'error': 'Vous ne pouvez pas arr√™ter cet enregistrement'}), 403
        
        # Arr√™ter l'enregistrement avec le service de capture
        result = video_capture_service.stop_recording(session_id)
        
        if result.get('status') == 'error':
            return jsonify({'error': result.get('error', 'Erreur lors de l\'arr√™t')}), 500
        
        # Mettre √† jour le terrain
        if court_id:
            court = Court.query.get(court_id)
            if court:
                court.is_recording = False
                court.recording_session_id = None
                db.session.commit()
        
        # Arr√™ter l'enregistrement dans le gestionnaire
        stop_info = recording_manager.stop_recording(
            session_id=session_id, 
            stopped_by='manual' if manual_stop else 'auto'
        )
        
        if not stop_info:
            return jsonify({'error': 'Enregistrement non trouv√©'}), 404
        
        recording_info = stop_info['recording_info']
        actual_duration = stop_info['actual_duration']
        
        stop_reason = "manual" if manual_stop else "auto"
        
        logger.info(f"‚èπÔ∏è Enregistrement arr√™t√© ({stop_reason}) par utilisateur {user.id}: {session_id}")
        
        return jsonify({
            'message': 'Enregistrement arr√™t√© avec succ√®s',
            'session_id': session_id,
            'status': result.get('status'),
            'video_id': result.get('video_id'),
            'video_filename': result.get('video_filename'),
            'duration': result.get('duration'),
            'actual_duration_minutes': round(actual_duration, 2) if actual_duration else None,
            'file_size': result.get('file_size'),
            'stopped_by': stop_reason
        }), 200
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"‚ùå Erreur lors de l'arr√™t: {e}")
        return jsonify({"error": f"Erreur lors de l'arr√™t: {str(e)}"}), 500


@videos_bp.route('/active-recordings', methods=['GET'])
def get_active_recordings():
    """Obtenir la liste des enregistrements actifs"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        # R√©cup√©rer les enregistrements de l'utilisateur
        user_recordings = recording_manager.get_user_recordings(user.id)
        
        return jsonify({
            'active_recordings': user_recordings,
            'total_active': len(user_recordings)
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des enregistrements actifs: {e}")
        return jsonify({'error': 'Erreur lors de la r√©cup√©ration des enregistrements actifs'}), 500


@videos_bp.route('/recording-timer/<recording_id>', methods=['GET'])
def get_recording_timer(recording_id):
    """Obtenir l'√©tat du compteur d'un enregistrement"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        # R√©cup√©rer les informations du timer
        timer_info = recording_manager.get_timer_info(recording_id)
        
        if not timer_info:
            return jsonify({
                'error': 'Compteur non trouv√© pour cet enregistrement',
                'recording_id': recording_id
            }), 404
        
        return jsonify(timer_info), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration du compteur: {e}")
        return jsonify({'error': f'Erreur lors de la r√©cup√©ration du compteur: {str(e)}'}), 500


@videos_bp.route('/recording/<recording_id>/extend', methods=['POST'])
def extend_recording(recording_id):
    """Prolonger un enregistrement en cours"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    data = request.get_json()
    additional_minutes = data.get('additional_minutes', 30)
    
    try:
        # V√©rifier que l'enregistrement appartient √† l'utilisateur
        if not recording_manager.belongs_to_user(recording_id, user.id):
            return jsonify({'error': 'Acc√®s non autoris√©'}), 403
        
        # Prolonger l'enregistrement
        extend_info = recording_manager.extend_recording(recording_id, additional_minutes)
        
        if not extend_info:
            return jsonify({'error': 'Enregistrement non trouv√© ou d√©j√† termin√©'}), 404
        
        logger.info(f"‚è±Ô∏è Enregistrement {recording_id} prolong√© de {additional_minutes} minutes par utilisateur {user.id}")
        
        return jsonify({
            'message': f'Enregistrement prolong√© de {additional_minutes} minutes',
            'new_duration_minutes': extend_info['new_duration_minutes'],
            'new_end_time': extend_info['new_end_time'].isoformat()
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la prolongation: {e}")
        return jsonify({'error': 'Erreur lors de la prolongation'}), 500


@videos_bp.route('/<int:video_id>', methods=['DELETE'])
def delete_video(video_id):
    """Supprimer une vid√©o"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        video = Video.query.get_or_404(video_id)
        
        # V√©rifier que la vid√©o appartient √† l'utilisateur
        if video.user_id != user.id:
            return jsonify({'error': 'Acc√®s non autoris√©'}), 403
        
        db.session.delete(video)
        db.session.commit()
        
        logger.info(f"üóëÔ∏è Vid√©o {video_id} supprim√©e par utilisateur {user.id}")
        
        return jsonify({'message': 'Vid√©o supprim√©e'}), 200
    except Exception as e:
        db.session.rollback()
        logger.error(f"‚ùå Erreur lors de la suppression: {e}")
        return jsonify({"error": "Erreur lors de la suppression"}), 500


# ====================================================================
# ROUTES API POUR LES TERRAINS ET CLUBS
# ====================================================================

@videos_bp.route("/clubs/<int:club_id>/courts", methods=["GET"])
def get_courts_for_club(club_id):
    """R√©cup√©rer les terrains d'un club"""
    user = get_current_user()
    if not user:
        return jsonify({"error": "Acc√®s non autoris√©"}), 401
    
    try:
        courts = Court.query.filter_by(club_id=club_id).all()
        return jsonify({"courts": [c.to_dict() for c in courts]}), 200
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des terrains: {e}")
        return jsonify({"error": f"Erreur lors de la r√©cup√©ration des terrains: {str(e)}"}), 500


@videos_bp.route('/courts/available', methods=['GET'])
def get_available_courts():
    """Obtenir la liste des terrains disponibles pour l'enregistrement"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        # R√©cup√©rer tous les terrains non occup√©s
        courts = Court.query.filter_by(is_recording=False).all()
        
        # Grouper par club
        courts_by_club = {}
        for court in courts:
            club = Club.query.get(court.club_id)
            if club:
                if club.id not in courts_by_club:
                    courts_by_club[club.id] = {
                        'club': club.to_dict(),
                        'courts': []
                    }
                courts_by_club[club.id]['courts'].append(court.to_dict())
        
        return jsonify({
            'available_courts': list(courts_by_club.values()),
            'total_available': len(courts)
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des terrains disponibles: {e}")
        return jsonify({'error': f'Erreur lors de la r√©cup√©ration des terrains: {str(e)}'}), 500


@videos_bp.route('/courts/<int:court_id>/camera-stream', methods=['GET'])
def get_camera_stream(court_id):
    """Endpoint pour r√©cup√©rer le flux de la cam√©ra d'un terrain"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        court = Court.query.get(court_id)
        if not court:
            return jsonify({'error': 'Terrain non trouv√©'}), 404
        
        return jsonify({
            'court_id': court.id,
            'court_name': court.name,
            'camera_url': court.camera_url,
            'stream_type': 'mjpeg'  # Type de flux pour la cam√©ra par d√©faut
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration du flux cam√©ra: {e}")
        return jsonify({'error': 'Erreur lors de la r√©cup√©ration du flux cam√©ra'}), 500


# ====================================================================
# ROUTES API POUR LE PARTAGE DE VID√âOS
# ====================================================================

@videos_bp.route('/<int:video_id>/share', methods=['POST'])
def share_video(video_id):
    """Partager une vid√©o"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        video = Video.query.get(video_id)
        if not video:
            return jsonify({'error': 'Vid√©o non trouv√©e'}), 404
        
        # V√©rifier que la vid√©o appartient √† l'utilisateur et est d√©verrouill√©e
        if video.user_id != user.id:
            return jsonify({'error': 'Acc√®s non autoris√© √† cette vid√©o'}), 403
        
        if not video.is_unlocked:
            return jsonify({'error': 'La vid√©o doit √™tre d√©verrouill√©e pour √™tre partag√©e'}), 400
        
        data = request.get_json()
        platform = data.get('platform')  # 'facebook', 'instagram', 'youtube'
        
        # G√©n√©rer les liens de partage
        base_url = request.host_url
        video_url = f"{base_url}videos/{video_id}/watch"
        
        share_urls = {
            'facebook': f"https://www.facebook.com/sharer/sharer.php?u={video_url}",
            'instagram': video_url,  # Instagram n√©cessite une approche diff√©rente
            'youtube': video_url,  # YouTube n√©cessite l'API YouTube
            'direct': video_url
        }
        
        return jsonify({
            'message': 'Liens de partage g√©n√©r√©s',
            'share_urls': share_urls,
            'video_url': video_url
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration des liens de partage: {e}")
        return jsonify({'error': 'Erreur lors de la g√©n√©ration des liens de partage'}), 500


@videos_bp.route('/<int:video_id>/watch', methods=['GET'])
def watch_video(video_id):
    """Route publique pour regarder une vid√©o partag√©e"""
    try:
        video = Video.query.get(video_id)
        if not video:
            return jsonify({'error': 'Vid√©o non trouv√©e'}), 404
        
        if not video.is_unlocked:
            return jsonify({'error': 'Vid√©o non disponible'}), 403
        
        # Retourner les informations de la vid√©o pour le lecteur
        return jsonify({
            'video': {
                'id': video.id,
                'title': video.title,
                'description': video.description,
                'file_url': video.file_url,
                'thumbnail_url': video.thumbnail_url,
                'duration': video.duration,
                'recorded_at': video.recorded_at.isoformat() if video.recorded_at else None
            }
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la lecture de la vid√©o: {e}")
        return jsonify({'error': 'Erreur lors de la lecture de la vid√©o'}), 500


# ====================================================================
# ROUTES API POUR LA GESTION DES CR√âDITS
# ====================================================================

@videos_bp.route('/buy-credits', methods=['POST'])
def buy_credits():
    """Acheter des cr√©dits"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        data = request.get_json()
        credits_to_buy = data.get('credits', 0)
        payment_method = data.get('payment_method', 'simulation')
        
        if credits_to_buy <= 0:
            return jsonify({'error': 'Le nombre de cr√©dits doit √™tre positif'}), 400
        
        # Pour le MVP, on simule le paiement
        # Dans une vraie impl√©mentation, on int√©grerait un syst√®me de paiement
        
        # Ajouter les cr√©dits au solde de l'utilisateur
        user.credits_balance += credits_to_buy
        db.session.commit()
        
        transaction_id = f'txn_{user.id}_{int(datetime.now().timestamp())}'
        
        logger.info(f"üí∞ Achat de {credits_to_buy} cr√©dits par utilisateur {user.id} - Transaction: {transaction_id}")
        
        return jsonify({
            'message': f'{credits_to_buy} cr√©dits achet√©s avec succ√®s',
            'new_balance': user.credits_balance,
            'transaction_id': transaction_id
        }), 200
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"‚ùå Erreur lors de l'achat de cr√©dits: {e}")
        return jsonify({'error': 'Erreur lors de l\'achat de cr√©dits'}), 500


# ====================================================================
# ROUTES API POUR LA GESTION DES QR CODES
# ====================================================================

@videos_bp.route('/qr-scan', methods=['POST'])
def scan_qr_code():
    """Endpoint pour g√©rer le scan QR code et ouvrir la cam√©ra sur mobile"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        data = request.get_json()
        qr_code = data.get('qr_code')
        
        if not qr_code:
            return jsonify({'error': 'QR code requis'}), 400
        
        # Rechercher le terrain correspondant au QR code
        court = Court.query.filter_by(qr_code=qr_code).first()
        if not court:
            return jsonify({'error': 'QR code invalide ou terrain non trouv√©'}), 404
        
        # R√©cup√©rer les informations du club
        club = Club.query.get(court.club_id)
        
        return jsonify({
            'message': 'QR code scann√© avec succ√®s',
            'court': court.to_dict(),
            'club': club.to_dict() if club else None,
            'camera_url': court.camera_url,
            'can_record': True  # L'utilisateur peut d√©marrer un enregistrement
        }), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du scan du QR code: {e}")
        return jsonify({'error': 'Erreur lors du scan du QR code'}), 500


# ====================================================================
# ROUTES API POUR LA GESTION DES ENREGISTREMENTS
# ====================================================================

@videos_bp.route('/recording/<recording_id>/status', methods=['GET'])
def get_recording_status_by_id(recording_id):
    """Obtenir le statut d'un enregistrement en cours avec le service de capture"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        # Obtenir le statut depuis le service de capture
        status = video_capture_service.get_recording_status(recording_id)
        
        if 'error' in status:
            return jsonify(status), 404
        
        # Ajouter les informations du timer si disponible
        timer_info = recording_manager.get_timer_info(recording_id)
        
        if timer_info:
            # Ajouter les informations du timer au statut
            status.update({
                'timer_status': timer_info['status'],
                'elapsed_minutes': timer_info['elapsed_minutes'],
                'remaining_minutes': timer_info['remaining_minutes'],
                'progress_percent': timer_info['progress_percent'],
                'duration_minutes': timer_info['duration_minutes'],
                'end_time': timer_info['end_time']
            })
        
        return jsonify(status), 200
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration du statut: {e}")
        return jsonify({'error': 'Erreur lors de la r√©cup√©ration du statut'}), 500


@videos_bp.route('/recording/<recording_id>/stop', methods=['POST'])
def stop_recording_by_id(recording_id):
    """Arr√™ter un enregistrement sp√©cifique par son ID avec le service de capture"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        # Arr√™ter l'enregistrement avec le service de capture
        result = video_capture_service.stop_recording(recording_id)
        
        if result.get('status') == 'error':
            return jsonify({'error': result.get('error', 'Erreur lors de l\'arr√™t')}), 500
        
        # Mettre √† jour le terrain qui √©tait en cours d'enregistrement
        court = Court.query.filter_by(recording_session_id=recording_id).first()
        if court:
            court.is_recording = False
            court.recording_session_id = None
            db.session.commit()
        
        # Arr√™ter l'enregistrement dans le gestionnaire
        recording_manager.stop_recording(recording_id, stopped_by='manual')
        
        logger.info(f"‚èπÔ∏è Enregistrement arr√™t√© par utilisateur {user.id}: {recording_id}")
        
        return jsonify({
            'message': 'Enregistrement arr√™t√© avec succ√®s',
            'recording_id': recording_id,
            'status': result.get('status'),
            'video_id': result.get('video_id'),
            'video_filename': result.get('video_filename'),
            'duration': result.get('duration'),
            'file_size': result.get('file_size')
        }), 200
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"‚ùå Erreur lors de l'arr√™t de l'enregistrement {recording_id}: {e}")
        return jsonify({'error': f'Erreur lors de l\'arr√™t: {str(e)}'}), 500


# ====================================================================
# ROUTES API POUR LA GESTION DES VID√âOS
# ====================================================================

@videos_bp.route('/<int:video_id>', methods=['PUT'])
def update_video(video_id):
    """Mettre √† jour les informations d'une vid√©o"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        video = Video.query.get_or_404(video_id)
        
        # V√©rifier que la vid√©o appartient √† l'utilisateur
        if video.user_id != user.id:
            return jsonify({'error': 'Acc√®s non autoris√©'}), 403
            
        data = request.get_json()
        if 'title' in data:
            video.title = data['title']
        if 'description' in data:
            video.description = data['description']
        
        db.session.commit()
        
        logger.info(f"‚úèÔ∏è Vid√©o {video_id} mise √† jour par utilisateur {user.id}")
        
        return jsonify({'message': 'Vid√©o mise √† jour', 'video': video.to_dict()}), 200
    except Exception as e:
        db.session.rollback()
        logger.error(f"‚ùå Erreur lors de la mise √† jour de la vid√©o: {e}")
        return jsonify({"error": "Erreur lors de la mise √† jour"}), 500


# ====================================================================
# ROUTES API POUR SERVIR LES VID√âOS ET THUMBNAILS
# ====================================================================

@videos_bp.route('/stream/<filename>', methods=['GET'])
def stream_video(filename):
    """Servir les fichiers vid√©o"""
    try:
        # V√©rifier si la vid√©o est accessible publiquement
        # On extrait l'ID de la vid√©o du nom de fichier (en supposant un format comme video_123.mp4)
        try:
            # Extraire l'ID de la vid√©o du nom de fichier
            video_id = int(filename.split('_')[1].split('.')[0])
            video = Video.query.get(video_id)
            
            # V√©rifier si la vid√©o existe et est d√©verrouill√©e
            if not video or not video.is_unlocked:
                # Si l'utilisateur est connect√© et est le propri√©taire, autoriser l'acc√®s
                user = get_current_user()
                if not user or (video and video.user_id != user.id):
                    return jsonify({'error': 'Acc√®s non autoris√©'}), 403
                
        except (ValueError, IndexError):
            # Si on ne peut pas extraire l'ID, on v√©rifie l'authentification
            user = get_current_user()
            if not user:
                return jsonify({'error': 'Non authentifi√©'}), 401
        
        # Pour le MVP, on g√©n√®re une vid√©o de test
        # Dans la vraie impl√©mentation, on servirait le fichier r√©el depuis le syst√®me de fichiers
        video_path = os.path.join(os.getcwd(), "static", "videos", filename)
        
        # Si le fichier existe, le servir
        if os.path.exists(video_path):
            return send_file(
                video_path,
                mimetype='video/mp4',
                as_attachment=False,
                download_name=filename
            )
        else:
            # Sinon, cr√©er une r√©ponse de stream vid√©o simul√©e pour le MVP
            def generate_fake_video():
                # Donn√©es de test pour simuler une vid√©o MP4
                fake_video_data = b'\x00\x00\x00\x18ftypmp42\x00\x00\x00\x00mp42isom' + b'\x00' * 100000
                yield fake_video_data
            
            return Response(
                generate_fake_video(),
                mimetype='video/mp4',
                headers={
                    'Content-Disposition': f'inline; filename="{filename}"',
                    'Accept-Ranges': 'bytes',
                    'Content-Length': '100024'  # Taille augment√©e pour une meilleure lecture
                }
            )
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du streaming vid√©o: {e}")
        return jsonify({'error': f'Erreur lors du streaming vid√©o: {str(e)}'}), 500


@videos_bp.route('/thumbnail/<filename>', methods=['GET'])
def get_thumbnail(filename):
    """Servir les thumbnails (simulation pour le MVP)"""
    try:
        # Pour le MVP, on g√©n√®re une image de placeholder
        # Dans la vraie impl√©mentation, on servirait la vraie thumbnail
        
        # Cr√©er une image placeholder simple (1x1 pixel transparent PNG)
        placeholder_png = (
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x01\x00\x00\x00\x007n\xf9$\x00\x00\x00\nIDATx\x9cc\xf8\x00\x00\x00\x01\x00\x01U\r\r\x82\x00\x00\x00\x00IEND\xaeB`\x82'
        )
        
        return Response(
            placeholder_png,
            mimetype='image/png',
            headers={
                'Content-Disposition': f'inline; filename="{filename}"',
                'Cache-Control': 'public, max-age=3600'
            }
        )
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chargement de la thumbnail: {e}")
        return jsonify({'error': 'Erreur lors du chargement de la thumbnail'}), 500


@videos_bp.route('/download/<int:video_id>', methods=['GET'])
def download_video(video_id):
    """T√©l√©charger une vid√©o"""
    user = get_current_user()
    if not user:
        return jsonify({'error': 'Non authentifi√©'}), 401
    
    try:
        video = Video.query.get(video_id)
        if not video:
            return jsonify({'error': 'Vid√©o non trouv√©e'}), 404
        
        # V√©rifier les permissions
        if video.user_id != user.id and not video.is_unlocked:
            return jsonify({'error': 'Acc√®s non autoris√©'}), 403
        
        # Pour le MVP, rediriger vers le stream
        filename = video.file_url.split('/')[-1]
        return Response(
            b'fake video data for download',
            mimetype='video/mp4',
            headers={
                'Content-Disposition': f'attachment; filename="{video.title}.mp4"',
                'Content-Type': 'application/octet-stream'
            }
        )
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du t√©l√©chargement de la vid√©o: {e}")
        return jsonify({'error': 'Erreur lors du t√©l√©chargement'}), 500
