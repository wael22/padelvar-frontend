"""
Script simple pour cr√©er la base de donn√©es avec les nouvelles fonctionnalit√©s
"""

import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire du projet au chemin Python
project_root = Path(__file__).parent.absolute()
sys.path.insert(0, str(project_root))

def create_database_with_new_features():
    """Cr√©er la base de donn√©es avec toutes les nouvelles fonctionnalit√©s"""
    
    print("üîÑ Cr√©ation de la base de donn√©es avec fonctionnalit√©s d'enregistrement avanc√©")
    print("=" * 70)
    
    try:
        from src.main import create_app
        
        # Cr√©er l'application
        app = create_app('development')
        
        with app.app_context():
            from src.models.database import db
            from src.models.user import User, UserRole, Club, Court, RecordingSession
            from werkzeug.security import generate_password_hash
            
            # Supprimer et recr√©er toutes les tables
            print("\nüóëÔ∏è  Suppression des anciennes tables...")
            db.drop_all()
            
            print("üìã Cr√©ation des nouvelles tables...")
            db.create_all()
            print("‚úÖ Tables cr√©√©es avec succ√®s")
            
            # V√©rifier que les nouvelles tables existent
            print("\nüîç V√©rification des nouvelles structures...")
            
            # Test RecordingSession
            test_recording = RecordingSession(
                recording_id='test',
                user_id=1,
                court_id=1,
                club_id=1,
                planned_duration=90
            )
            print("‚úÖ Mod√®le RecordingSession valid√©")
            
            # Test Court avec nouvelles colonnes
            inspector = db.inspect(db.engine)
            court_columns = [col['name'] for col in inspector.get_columns('court')]
            if 'is_recording' in court_columns and 'current_recording_id' in court_columns:
                print("‚úÖ Nouvelles colonnes Court valid√©es")
            else:
                print("‚ùå Colonnes Court manquantes")
            
            # Cr√©er les donn√©es de test
            print("\nüë§ Cr√©ation des utilisateurs et donn√©es de test...")
            
            # Super admin
            admin = User(
                email='admin@padelvar.com',
                password_hash=generate_password_hash('admin123'),
                name='Super Admin',
                role=UserRole.SUPER_ADMIN,
                credits_balance=1000
            )
            db.session.add(admin)
            
            # Joueur de test
            player = User(
                email='test@example.com',
                password_hash=generate_password_hash('password123'),
                name='Joueur Test',
                role=UserRole.PLAYER,
                credits_balance=10
            )
            db.session.add(player)
            
            # Club de test
            club = Club(
                name='Club Test',
                address='123 Rue Test',
                phone_number='12345678',
                email='club@test.com'
            )
            db.session.add(club)
            db.session.flush()  # Pour obtenir l'ID du club
            
            # Utilisateur club
            club_user = User(
                email='club@example.com',
                password_hash=generate_password_hash('password123'),
                name='Club Manager',
                role=UserRole.CLUB,
                club_id=club.id,
                credits_balance=0
            )
            db.session.add(club_user)
            
            # Terrains de test avec nouvelles colonnes
            court1 = Court(
                name='Terrain Principal',
                qr_code='QR001',
                camera_url='rtmp://test.com/court1',
                club_id=club.id,
                is_recording=False,
                current_recording_id=None
            )
            court2 = Court(
                name='Terrain Annexe',
                qr_code='QR002',
                camera_url='rtmp://test.com/court2',
                club_id=club.id,
                is_recording=False,
                current_recording_id=None
            )
            db.session.add_all([court1, court2])
            
            # Club suppl√©mentaire
            club2 = Club(
                name='Club Avanc√©',
                address='456 Avenue Sport',
                phone_number='87654321',
                email='advanced@club.com'
            )
            db.session.add(club2)
            db.session.flush()
            
            # Terrain pour le second club
            court3 = Court(
                name='Court Professionnel',
                qr_code='QR003',
                camera_url='rtmp://test.com/court3',
                club_id=club2.id,
                is_recording=False,
                current_recording_id=None
            )
            db.session.add(court3)
            
            # Faire suivre les clubs par le joueur
            player.followed_clubs.append(club)
            player.followed_clubs.append(club2)
            player.club_id = club.id
            
            db.session.commit()
            print("‚úÖ Donn√©es de test cr√©√©es")
            
            # V√©rifier les relations
            player_clubs = player.followed_clubs.all()
            print(f"‚úÖ Joueur suit {len(player_clubs)} clubs")
            
            print("\nüéâ Base de donn√©es cr√©√©e avec succ√®s!")
            print("\n" + "="*50)
            print("COMPTES DE TEST:")
            print("‚Ä¢ Super Admin: admin@padelvar.com / admin123")
            print("‚Ä¢ Joueur: test@example.com / password123 (10 cr√©dits)")
            print("‚Ä¢ Club: club@example.com / password123")
            print("\nDONN√âES CR√â√âES:")
            print("‚Ä¢ 2 clubs avec 3 terrains au total")
            print("‚Ä¢ Relations club-joueur configur√©es")
            print("‚Ä¢ Terrains avec QR codes")
            print("\nNOUVELLES FONCTIONNALIT√âS:")
            print("‚Ä¢ ‚ú® S√©lection de dur√©e d'enregistrement (60, 90, 120 min, MAX)")
            print("‚Ä¢ ‚è∞ Arr√™t automatique apr√®s la dur√©e choisie")
            print("‚Ä¢ üì∫ Bandeau d'enregistrement en cours pour les joueurs")
            print("‚Ä¢ üè¢ Interface de gestion des enregistrements pour les clubs")
            print("‚Ä¢ üîí R√©servation automatique des terrains pendant l'enregistrement")
            print("‚Ä¢ üõë Possibilit√© d'arr√™t forc√© par le club")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = create_database_with_new_features()
    if success:
        print("\nüöÄ Red√©marrez le serveur pour utiliser les nouvelles fonctionnalit√©s!")
        print("   python app.py")
    else:
        print("\nüí• √âchec de la cr√©ation de la base de donn√©es.")
        sys.exit(1)
