"""
Script pour appliquer la migration du syst√®me d'enregistrement avanc√©
"""

import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire du projet au chemin Python
project_root = Path(__file__).parent.absolute()
sys.path.insert(0, str(project_root))

from flask import Flask
from flask_migrate import upgrade
from src.main import create_app

def apply_recording_migration():
    """Appliquer la migration pour le syst√®me d'enregistrement"""
    
    print("üîÑ Application de la migration pour le syst√®me d'enregistrement avanc√©")
    print("=" * 60)
    
    try:
        # Cr√©er l'application
        app = create_app('development')
        
        with app.app_context():
            # Appliquer toutes les migrations en attente
            print("\nüìã Application des migrations...")
            upgrade()
            print("‚úÖ Migrations appliqu√©es avec succ√®s")
            
            # V√©rifier que les nouvelles tables existent
            from src.models.database import db
            from src.models.user import RecordingSession, Court
            
            print("\nüîç V√©rification des nouvelles structures...")
            
            # V√©rifier la table recording_session
            try:
                result = db.session.execute("SELECT COUNT(*) FROM recording_session")
                count = result.scalar()
                print(f"‚úÖ Table recording_session cr√©√©e (0 enregistrements)")
            except Exception as e:
                print(f"‚ùå Erreur avec la table recording_session: {e}")
            
            # V√©rifier les nouvelles colonnes de Court
            try:
                result = db.session.execute("SELECT is_recording, current_recording_id FROM court LIMIT 1")
                print("‚úÖ Colonnes is_recording et current_recording_id ajout√©es √† Court")
            except Exception as e:
                print(f"‚ùå Erreur avec les nouvelles colonnes de Court: {e}")
            
            print("\nüéâ Migration du syst√®me d'enregistrement termin√©e avec succ√®s!")
            print("\nNouveaut√©s disponibles:")
            print("‚Ä¢ S√©lection de dur√©e d'enregistrement (60, 90, 120 min ou MAX)")
            print("‚Ä¢ Arr√™t automatique apr√®s la dur√©e s√©lectionn√©e")
            print("‚Ä¢ Bandeau d'enregistrement en cours pour les joueurs")
            print("‚Ä¢ Gestion des enregistrements actifs pour les clubs")
            print("‚Ä¢ R√©servation automatique des terrains pendant l'enregistrement")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = apply_recording_migration()
    if success:
        print("\nüöÄ Vous pouvez maintenant red√©marrer le serveur pour utiliser les nouvelles fonctionnalit√©s!")
    else:
        print("\nüí• La migration a √©chou√©. V√©rifiez les erreurs ci-dessus.")
        sys.exit(1)
