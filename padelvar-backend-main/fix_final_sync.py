#!/usr/bin/env python3
"""
Script de correction finale pour la synchronisation bidirectionnelle
Ce script corrige directement les probl√®mes dans la base de donn√©es
"""

import sqlite3
import os
from werkzeug.security import generate_password_hash
import json

# Fonction principale
def fix_bidirectional_sync():
    """
    R√©pare la synchronisation bidirectionnelle entre clubs et utilisateurs
    """
    
    print("üîß R√âPARATION SYNCHRONISATION BIDIRECTIONNELLE")
    print("=" * 60)
    
    # V√©rifier l'existence de la base de donn√©es
    if not os.path.exists('instance/app.db'):
        print("‚ùå Erreur: Base de donn√©es 'instance/app.db' non trouv√©e!")
        print("üí° Assurez-vous d'√™tre dans le bon r√©pertoire")
        return False
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect('instance/app.db')
        cursor = conn.cursor()
        
        print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
        
        # 1. Diagnostic initial
        print("\n1Ô∏è‚É£ DIAGNOSTIC INITIAL")
        print("-" * 30)
        
        # Compter les clubs
        cursor.execute("SELECT COUNT(*) FROM club")
        total_clubs = cursor.fetchone()[0]
        print(f"üìä Clubs dans la base: {total_clubs}")
        
        # Compter les utilisateurs clubs
        cursor.execute("SELECT COUNT(*) FROM user WHERE role = 'CLUB'")
        total_club_users = cursor.fetchone()[0]
        print(f"üë§ Utilisateurs clubs: {total_club_users}")
        
        # Identifier les probl√®mes de synchronisation
        cursor.execute("""
            SELECT c.id, c.name, c.email, c.phone_number,
                   u.id as user_id, u.name as user_name, u.email as user_email, u.phone_number as user_phone
            FROM club c
            LEFT JOIN user u ON c.id = u.club_id AND u.role = 'CLUB'
        """)
        
        clubs_data = cursor.fetchall()
        
        clubs_without_users = []
        desync_clubs = []
        
        for row in clubs_data:
            club_id, club_name, club_email, club_phone, user_id, user_name, user_email, user_phone = row
            
            if user_id is None:
                clubs_without_users.append((club_id, club_name, club_email, club_phone))
            else:
                # V√©rifier la synchronisation
                if (club_name != user_name or 
                    club_email != user_email or 
                    club_phone != user_phone):
                    desync_clubs.append((club_id, club_name, club_email, club_phone, user_id))
        
        print(f"‚ö†Ô∏è  Clubs sans utilisateur: {len(clubs_without_users)}")
        print(f"‚ö†Ô∏è  Clubs d√©synchronis√©s: {len(desync_clubs)}")
        
        # 2. Corrections
        print("\n2Ô∏è‚É£ CORRECTIONS")
        print("-" * 30)
        
        corrections_count = 0
        
        # Cr√©er des utilisateurs pour les clubs qui n'en ont pas
        for club_id, club_name, club_email, club_phone in clubs_without_users:
            print(f"‚ûï Cr√©ation utilisateur pour club {club_id} ({club_name})")
            
            password_hash = generate_password_hash('club123')
            
            cursor.execute("""
                INSERT INTO user (email, password_hash, name, role, club_id, phone_number, credits_balance, created_at)
                VALUES (?, ?, ?, 'CLUB', ?, ?, 0, datetime('now'))
            """, (club_email, password_hash, club_name, club_id, club_phone))
            
            new_user_id = cursor.lastrowid
            print(f"   ‚úÖ Utilisateur {new_user_id} cr√©√© (mot de passe: club123)")
            corrections_count += 1
        
        # Synchroniser les clubs d√©synchronis√©s
        for club_id, club_name, club_email, club_phone, user_id in desync_clubs:
            print(f"üîÑ Synchronisation club {club_id} avec utilisateur {user_id}")
            
            cursor.execute("""
                UPDATE user 
                SET name = ?, email = ?, phone_number = ?
                WHERE id = ?
            """, (club_name, club_email, club_phone, user_id))
            
            print(f"   ‚úÖ Utilisateur {user_id} synchronis√©")
            corrections_count += 1
        
        # 3. V√©rifier les comptes admin
        print("\n3Ô∏è‚É£ V√âRIFICATION COMPTES ADMIN")
        print("-" * 30)
        
        admin_accounts = [
            ('admin@padelvar.com', 'Super Admin'),
            ('admin2@padelvar.com', 'Super Admin 2')
        ]
        
        for admin_email, admin_name in admin_accounts:
            cursor.execute("SELECT id FROM user WHERE email = ? AND role = 'SUPER_ADMIN'", (admin_email,))
            admin_exists = cursor.fetchone()
            
            if admin_exists:
                print(f"‚úÖ {admin_email} existe d√©j√†")
            else:
                print(f"‚ûï Cr√©ation de {admin_email}")
                password_hash = generate_password_hash('admin123')
                cursor.execute("""
                    INSERT INTO user (email, password_hash, name, role, credits_balance, created_at)
                    VALUES (?, ?, ?, 'SUPER_ADMIN', 100, datetime('now'))
                """, (admin_email, password_hash, admin_name))
                print(f"   ‚úÖ {admin_email} cr√©√© (mot de passe: admin123)")
                corrections_count += 1
        
        # Commit des changements
        conn.commit()
        
        # 4. V√©rification finale
        print("\n4Ô∏è‚É£ V√âRIFICATION FINALE")
        print("-" * 30)
        
        cursor.execute("""
            SELECT c.id, c.name, c.email, c.phone_number,
                   u.id as user_id, u.name as user_name, u.email as user_email, u.phone_number as user_phone
            FROM club c
            LEFT JOIN user u ON c.id = u.club_id AND u.role = 'CLUB'
        """)
        
        final_data = cursor.fetchall()
        
        final_problems = 0
        for row in final_data:
            club_id, club_name, club_email, club_phone, user_id, user_name, user_email, user_phone = row
            
            if user_id is None:
                print(f"‚ùå Club {club_id}: Toujours sans utilisateur")
                final_problems += 1
            elif (club_name != user_name or club_email != user_email or club_phone != user_phone):
                print(f"‚ùå Club {club_id}: Toujours d√©synchronis√©")
                final_problems += 1
            else:
                print(f"‚úÖ Club {club_id}: Parfaitement synchronis√©")
        
        conn.close()
        
        # 5. R√©sum√©
        print(f"\n5Ô∏è‚É£ R√âSUM√â")
        print("-" * 30)
        print(f"üîß Corrections appliqu√©es: {corrections_count}")
        print(f"‚ö†Ô∏è  Probl√®mes restants: {final_problems}")
        
        if final_problems == 0:
            print("\nüéØ SYNCHRONISATION BIDIRECTIONNELLE R√âPAR√âE!")
            print("‚úÖ Tous les clubs ont un utilisateur associ√©")
            print("‚úÖ Toutes les donn√©es sont synchronis√©es")
            
            print("\nüìù PROCHAINES √âTAPES:")
            print("1. D√©marrez le serveur backend:")
            print("   \"C:/Users/PC/Desktop/1-Padel App/dev/venv/Scripts/python.exe\" app.py")
            print("\n2. Dans un autre terminal, d√©marrez le frontend:")
            print("   cd ../padelvar-frontend-main")
            print("   npm run dev")
            print("\n3. Testez la synchronisation:")
            print("   - Connectez-vous en tant que club")
            print("   - Modifiez votre profil")
            print("   - V√©rifiez dans l'admin que les changements apparaissent")
            
            return True
        else:
            print(f"\n‚ö†Ô∏è  Il reste {final_problems} probl√®me(s)")
            print("üîÑ R√©ex√©cutez ce script si n√©cessaire")
            return False
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    # Changer vers le bon r√©pertoire si n√©cessaire
    script_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(script_dir)
    
    # Ex√©cuter la r√©paration
    success = fix_bidirectional_sync()
    
    if success:
        print("\nüöÄ Synchronisation bidirectionnelle op√©rationnelle!")
    else:
        print("\n‚ùå Certains probl√®mes n'ont pas pu √™tre r√©solus")
        print("üí° V√©rifiez les messages d'erreur ci-dessus")
