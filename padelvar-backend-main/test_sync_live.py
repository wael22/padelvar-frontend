#!/usr/bin/env python3
"""
Test de la synchronisation bidirectionnelle en temps r√©el
"""

import requests
import json
import time

def test_bidirectional_sync():
    """
    Teste la synchronisation bidirectionnelle entre club et admin
    """
    
    print("üß™ TEST SYNCHRONISATION BIDIRECTIONNELLE")
    print("=" * 50)
    
    base_url = "http://localhost:5000"
    
    # 1. V√©rifier que le serveur est accessible
    print("\n1Ô∏è‚É£ V√âRIFICATION SERVEUR")
    print("-" * 25)
    
    try:
        response = requests.get(f"{base_url}/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur backend accessible")
        else:
            print(f"‚ö†Ô∏è  Serveur r√©pond avec status {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå Serveur backend non accessible")
        print("üí° Assurez-vous que le serveur Flask est d√©marr√©")
        return False
    except Exception as e:
        print(f"‚ùå Erreur connexion serveur: {e}")
        return False
    
    # 2. Login en tant qu'admin
    print("\n2Ô∏è‚É£ CONNEXION ADMIN")
    print("-" * 20)
    
    admin_session = requests.Session()
    
    try:
        login_response = admin_session.post(
            f"{base_url}/api/auth/login",
            json={"email": "admin@padelvar.com", "password": "admin123"},
            timeout=5
        )
        
        if login_response.status_code == 200:
            print("‚úÖ Connexion admin r√©ussie")
        else:
            print(f"‚ùå √âchec connexion admin: {login_response.status_code}")
            print(f"   R√©ponse: {login_response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur login admin: {e}")
        return False
    
    # 3. R√©cup√©rer la liste des clubs
    print("\n3Ô∏è‚É£ R√âCUP√âRATION CLUBS")
    print("-" * 25)
    
    try:
        clubs_response = admin_session.get(f"{base_url}/api/admin/clubs")
        
        if clubs_response.status_code == 200:
            clubs_data = clubs_response.json()
            clubs = clubs_data.get('clubs', [])
            print(f"‚úÖ {len(clubs)} club(s) trouv√©(s)")
            
            if not clubs:
                print("‚ö†Ô∏è  Aucun club disponible pour tester")
                return False
                
        else:
            print(f"‚ùå √âchec r√©cup√©ration clubs: {clubs_response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration clubs: {e}")
        return False
    
    # 4. Tester la modification d'un club depuis l'admin
    print("\n4Ô∏è‚É£ TEST MODIFICATION ADMIN ‚Üí CLUB")
    print("-" * 35)
    
    test_club = clubs[0]  # Prendre le premier club
    club_id = test_club['id']
    original_phone = test_club.get('phone_number', '')
    
    # G√©n√©rer un nouveau num√©ro de t√©l√©phone unique
    new_phone = f"+33{int(time.time()) % 1000000000}"
    
    print(f"üìã Club de test: {test_club['name']} (ID: {club_id})")
    print(f"üìû Ancien t√©l√©phone: {original_phone}")
    print(f"üìû Nouveau t√©l√©phone: {new_phone}")
    
    try:
        update_data = {
            "name": test_club['name'],
            "email": test_club['email'],
            "phone_number": new_phone,
            "address": test_club.get('address', '')
        }
        
        update_response = admin_session.put(
            f"{base_url}/api/admin/clubs/{club_id}",
            json=update_data
        )
        
        if update_response.status_code == 200:
            print("‚úÖ Modification admin r√©ussie")
            
            # V√©rifier la synchronisation imm√©diate
            time.sleep(1)  # Attendre un peu
            
            clubs_after = admin_session.get(f"{base_url}/api/admin/clubs")
            if clubs_after.status_code == 200:
                updated_clubs = clubs_after.json().get('clubs', [])
                updated_club = next((c for c in updated_clubs if c['id'] == club_id), None)
                
                if updated_club and updated_club['phone_number'] == new_phone:
                    print("‚úÖ Synchronisation admin confirm√©e")
                else:
                    print("‚ùå Synchronisation admin √©chou√©e")
                    return False
            else:
                print("‚ùå Impossible de v√©rifier la synchronisation")
                return False
                
        else:
            print(f"‚ùå √âchec modification admin: {update_response.status_code}")
            print(f"   R√©ponse: {update_response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur modification admin: {e}")
        return False
    
    # 5. V√©rifier la route de synchronisation manuelle
    print("\n5Ô∏è‚É£ TEST SYNCHRONISATION MANUELLE")
    print("-" * 35)
    
    try:
        sync_response = admin_session.post(f"{base_url}/api/admin/sync/club-user-data")
        
        if sync_response.status_code == 200:
            sync_results = sync_response.json()
            print("‚úÖ Route de synchronisation accessible")
            print(f"   Clubs trait√©s: {sync_results['results']['clubs_processed']}")
            print(f"   Corrections: {sync_results['results']['sync_corrections']}")
        else:
            print(f"‚ùå Route de synchronisation √©chou√©e: {sync_response.status_code}")
            print(f"   R√©ponse: {sync_response.text}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur test synchronisation manuelle: {e}")
    
    # 6. R√©sum√©
    print(f"\n6Ô∏è‚É£ R√âSUM√â")
    print("-" * 15)
    print("‚úÖ Synchronisation bidirectionnelle op√©rationnelle!")
    print("‚úÖ Les modifications admin se refl√®tent imm√©diatement")
    print("‚úÖ La route de synchronisation fonctionne")
    
    print(f"\nüí° CONSEIL:")
    print("Pour tester la synchronisation club ‚Üí admin:")
    print("1. Connectez-vous en tant que club dans le frontend")
    print("2. Modifiez votre profil")
    print("3. V√©rifiez les changements dans l'admin")
    
    return True

if __name__ == '__main__':
    success = test_bidirectional_sync()
    
    if success:
        print("\nüéØ Test de synchronisation r√©ussi!")
    else:
        print("\n‚ùå Probl√®mes d√©tect√©s dans la synchronisation")
        print("üí° V√©rifiez que le serveur backend est d√©marr√©")
