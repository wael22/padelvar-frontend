#!/usr/bin/env python3
"""
Script de diagnostic et r√©paration de la synchronisation bidirectionnelle
"""

import os
import sqlite3
import requests
import json
import time
from werkzeug.security import generate_password_hash

def diagnose_sync_problem():
    print("üîß DIAGNOSTIC SYNCHRONISATION BIDIRECTIONNELLE")
    print("=" * 60)
    
    # 1. V√©rifier la base de donn√©es
    print("\n1Ô∏è‚É£ V√âRIFICATION BASE DE DONN√âES")
    print("-" * 30)
    
    if not os.path.exists('instance/app.db'):
        print("‚ùå Base de donn√©es non trouv√©e!")
        return False
    
    try:
        conn = sqlite3.connect('instance/app.db')
        cursor = conn.cursor()
        
        # V√©rifier les tables
        cursor.execute("PRAGMA table_info(club)")
        club_columns = [col[1] for col in cursor.fetchall()]
        print(f"üìä Colonnes table 'club': {club_columns}")
        
        cursor.execute("PRAGMA table_info(user)")
        user_columns = [col[1] for col in cursor.fetchall()]
        print(f"üë§ Colonnes table 'user': {user_columns}")
        
        # Lister tous les clubs et leurs utilisateurs
        cursor.execute("""
            SELECT c.id, c.name, c.email, c.phone_number,
                   u.id as user_id, u.name as user_name, u.email as user_email, u.phone_number as user_phone, u.role
            FROM club c
            LEFT JOIN user u ON c.id = u.club_id
            ORDER BY c.id
        """)
        
        data = cursor.fetchall()
        print(f"\nüìã √âTAT ACTUEL DES DONN√âES:")
        print("-" * 40)
        
        sync_problems = []
        
        for row in data:
            club_id, club_name, club_email, club_phone, user_id, user_name, user_email, user_phone, user_role = row
            
            print(f"\nüè¢ Club {club_id}: {club_name}")
            print(f"   Email: {club_email}")
            print(f"   T√©l√©phone: {club_phone}")
            
            if user_id:
                print(f"üë§ Utilisateur associ√© {user_id}: {user_name} ({user_role})")
                print(f"   Email: {user_email}")
                print(f"   T√©l√©phone: {user_phone}")
                
                # V√©rifier les incoh√©rences
                issues = []
                if club_name != user_name:
                    issues.append(f"Nom: '{club_name}' ‚â† '{user_name}'")
                if club_email != user_email:
                    issues.append(f"Email: '{club_email}' ‚â† '{user_email}'")
                if club_phone != user_phone:
                    issues.append(f"T√©l√©phone: '{club_phone}' ‚â† '{user_phone}'")
                
                if issues:
                    print(f"   ‚ö†Ô∏è  INCOH√âRENCES: {', '.join(issues)}")
                    sync_problems.append((club_id, issues))
                else:
                    print(f"   ‚úÖ SYNCHRONIS√â")
            else:
                print(f"   ‚ùå AUCUN UTILISATEUR ASSOCI√â")
                sync_problems.append((club_id, ["Aucun utilisateur associ√©"]))
        
        conn.close()
        
        if sync_problems:
            print(f"\n‚ö†Ô∏è  {len(sync_problems)} club(s) avec probl√®mes de synchronisation")
            return sync_problems
        else:
            print(f"\n‚úÖ Tous les clubs sont synchronis√©s")
            return []
            
    except Exception as e:
        print(f"‚ùå Erreur lors du diagnostic: {e}")
        return False

def fix_sync_problems(sync_problems):
    print("\n2Ô∏è‚É£ CORRECTION DES PROBL√àMES")
    print("-" * 30)
    
    if not sync_problems:
        print("‚úÖ Aucun probl√®me √† corriger")
        return True
    
    try:
        conn = sqlite3.connect('instance/app.db')
        cursor = conn.cursor()
        
        corrections_made = 0
        
        for club_id, issues in sync_problems:
            print(f"\nüîß Correction du club {club_id}...")
            
            # R√©cup√©rer les donn√©es du club
            cursor.execute("SELECT id, name, email, phone_number, address FROM club WHERE id = ?", (club_id,))
            club_data = cursor.fetchone()
            
            if not club_data:
                print(f"   ‚ùå Club {club_id} non trouv√©")
                continue
            
            club_id, club_name, club_email, club_phone, club_address = club_data
            
            # Chercher l'utilisateur associ√©
            cursor.execute("SELECT id FROM user WHERE club_id = ? AND role = 'CLUB'", (club_id,))
            user_result = cursor.fetchone()
            
            if user_result:
                # Mettre √† jour l'utilisateur existant
                user_id = user_result[0]
                cursor.execute("""
                    UPDATE user SET name = ?, email = ?, phone_number = ? WHERE id = ?
                """, (club_name, club_email, club_phone, user_id))
                print(f"   ‚úÖ Utilisateur {user_id} mis √† jour")
            else:
                # Cr√©er un nouvel utilisateur
                password_hash = generate_password_hash('default123')
                cursor.execute("""
                    INSERT INTO user (email, password_hash, name, role, club_id, phone_number, credits_balance, created_at)
                    VALUES (?, ?, ?, 'CLUB', ?, ?, 0, datetime('now'))
                """, (club_email, password_hash, club_name, club_id, club_phone))
                user_id = cursor.lastrowid
                print(f"   ‚úÖ Nouvel utilisateur {user_id} cr√©√© (mot de passe: default123)")
            
            corrections_made += 1
        
        conn.commit()
        conn.close()
        
        print(f"\n‚úÖ {corrections_made} correction(s) appliqu√©e(s)")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des corrections: {e}")
        return False

def test_sync_routes():
    print("\n3Ô∏è‚É£ TEST DES ROUTES DE SYNCHRONISATION")
    print("-" * 40)
    
    try:
        # Se connecter en tant qu'admin
        session = requests.Session()
        login_response = session.post(
            "http://localhost:5000/api/auth/login",
            json={"email": "admin@padelvar.com", "password": "admin123"},
            timeout=5
        )
        
        if login_response.status_code != 200:
            print("‚ùå Impossible de se connecter en tant qu'admin")
            return False
        
        print("‚úÖ Connexion admin r√©ussie")
        
        # Tester la route de synchronisation
        sync_response = session.post("http://localhost:5000/api/admin/sync/club-user-data")
        
        if sync_response.status_code == 200:
            results = sync_response.json()
            print(f"‚úÖ Route de synchronisation accessible")
            print(f"   Clubs trait√©s: {results['results']['clubs_processed']}")
            print(f"   Corrections: {results['results']['sync_corrections']}")
            
            if results['results']['details']:
                print("   D√©tails:")
                for detail in results['results']['details']:
                    print(f"     - {detail['club_name']}: {detail['corrections']}")
        else:
            print(f"‚ùå Route de synchronisation √©chou√©e: {sync_response.status_code}")
            print(f"   R√©ponse: {sync_response.text}")
            return False
        
        # Tester les routes CRUD des clubs
        clubs_response = session.get("http://localhost:5000/api/admin/clubs")
        if clubs_response.status_code == 200:
            print("‚úÖ Route GET clubs accessible")
            clubs = clubs_response.json().get('clubs', [])
            if clubs:
                test_club = clubs[0]
                club_id = test_club['id']
                
                # Test de mise √† jour
                original_phone = test_club.get('phone_number', '')
                new_phone = f"+33{int(time.time()) % 1000000000}"
                
                update_data = {
                    "name": test_club['name'],
                    "email": test_club['email'],
                    "phone_number": new_phone,
                    "address": test_club.get('address', '')
                }
                
                update_response = session.put(
                    f"http://localhost:5000/api/admin/clubs/{club_id}",
                    json=update_data
                )
                
                if update_response.status_code == 200:
                    print(f"‚úÖ Mise √† jour club r√©ussie (nouveau t√©l√©phone: {new_phone})")
                    
                    # V√©rifier que la synchronisation a eu lieu
                    clubs_after = session.get("http://localhost:5000/api/admin/clubs")
                    updated_clubs = clubs_after.json().get('clubs', [])
                    updated_club = next((c for c in updated_clubs if c['id'] == club_id), None)
                    
                    if updated_club and updated_club['phone_number'] == new_phone:
                        print("‚úÖ Synchronisation imm√©diate confirm√©e")
                    else:
                        print("‚ùå Synchronisation imm√©diate √©chou√©e")
                        return False
                else:
                    print(f"‚ùå Mise √† jour club √©chou√©e: {update_response.status_code}")
                    return False
        else:
            print(f"‚ùå Route GET clubs √©chou√©e: {clubs_response.status_code}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des routes: {e}")
        return False

def create_test_club():
    print("\n4Ô∏è‚É£ CR√âATION D'UN CLUB DE TEST")
    print("-" * 30)
    
    try:
        conn = sqlite3.connect('instance/app.db')
        cursor = conn.cursor()
        
        # Cr√©er un club de test
        test_club_name = f"Club Test Sync {int(time.time())}"
        test_email = f"test{int(time.time())}@clubtest.com"
        test_phone = f"+33{int(time.time()) % 1000000000}"
        
        cursor.execute("""
            INSERT INTO club (name, email, phone_number, address, created_at)
            VALUES (?, ?, ?, 'Adresse Test', datetime('now'))
        """, (test_club_name, test_email, test_phone))
        
        club_id = cursor.lastrowid
        
        # Cr√©er l'utilisateur associ√©
        password_hash = generate_password_hash('test123')
        cursor.execute("""
            INSERT INTO user (email, password_hash, name, role, club_id, phone_number, credits_balance, created_at)
            VALUES (?, ?, ?, 'CLUB', ?, ?, 0, datetime('now'))
        """, (test_email, password_hash, test_club_name, club_id, test_phone))
        
        user_id = cursor.lastrowid
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Club de test cr√©√©:")
        print(f"   Club ID: {club_id}")
        print(f"   User ID: {user_id}")
        print(f"   Email: {test_email}")
        print(f"   Nom: {test_club_name}")
        print(f"   T√©l√©phone: {test_phone}")
        
        return club_id, user_id, test_email
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation club de test: {e}")
        return None

def main():
    print("üîß R√âPARATION SYNCHRONISATION BIDIRECTIONNELLE")
    print("=" * 70)
    
    # √âtape 1: Diagnostic
    sync_problems = diagnose_sync_problem()
    
    if sync_problems is False:
        print("‚ùå Impossible de faire le diagnostic")
        return
    
    # √âtape 2: Correction
    if sync_problems:
        if fix_sync_problems(sync_problems):
            print("\nüîÑ Re-diagnostic apr√®s correction...")
            sync_problems = diagnose_sync_problem()
    
    # √âtape 3: Test des routes
    if test_sync_routes():
        print("\n‚úÖ Routes de synchronisation fonctionnelles")
    else:
        print("\n‚ùå Probl√®me avec les routes de synchronisation")
    
    # √âtape 4: Cr√©er un club de test pour v√©rifier
    test_result = create_test_club()
    if test_result:
        print("\n‚úÖ Club de test cr√©√© pour v√©rification future")
    
    print(f"\n{'='*70}")
    print("üéØ R√âSUM√â:")
    if not sync_problems:
        print("‚úÖ Synchronisation bidirectionnelle op√©rationnelle")
        print("‚úÖ Vous pouvez maintenant modifier les profils clubs")
        print("‚úÖ Les changements appara√Ætront imm√©diatement dans l'admin")
    else:
        print("‚ö†Ô∏è  Probl√®mes de synchronisation d√©tect√©s et corrig√©s")
        print("üîÑ Red√©marrez le serveur et testez √† nouveau")
    
    print("=" * 70)

if __name__ == '__main__':
    main()
